
STM32_SPI_Flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045d0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08004758  08004758  00014758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004834  08004834  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08004834  08004834  00014834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800483c  0800483c  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800483c  0800483c  0001483c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004840  08004840  00014840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08004844  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b7c  20000084  080048c8  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20000c00  080048c8  00020c00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ce6a  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001de5  00000000  00000000  0002cf1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000950  00000000  00000000  0002ed08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000858  00000000  00000000  0002f658  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021303  00000000  00000000  0002feb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000098ac  00000000  00000000  000511b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c236b  00000000  00000000  0005aa5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011cdca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000247c  00000000  00000000  0011ce48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000084 	.word	0x20000084
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004740 	.word	0x08004740

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000088 	.word	0x20000088
 80001c4:	08004740 	.word	0x08004740

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fb58 	bl	8000b80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f868 	bl	80005a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f906 	bl	80006e4 <MX_GPIO_Init>
  MX_SPI1_Init();
 80004d8:	f000 f8ce 	bl	8000678 <MX_SPI1_Init>
  MX_FATFS_Init();
 80004dc:	f001 fd5e 	bl	8001f9c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 80004e0:	2064      	movs	r0, #100	; 0x64
 80004e2:	f000 fbbf 	bl	8000c64 <HAL_Delay>


  //format drive
  //f_mkfs("", FM_ANY, 0, buffer, sizeof(buffer));

  FATFS_LinkDriver(&USER_Driver, SFLASHPath);
 80004e6:	4927      	ldr	r1, [pc, #156]	; (8000584 <main+0xbc>)
 80004e8:	4827      	ldr	r0, [pc, #156]	; (8000588 <main+0xc0>)
 80004ea:	f004 f8ed 	bl	80046c8 <FATFS_LinkDriver>

  //Mount drive
  fres = f_mount(&FatFs, &SFLASHPath, 0);
 80004ee:	2200      	movs	r2, #0
 80004f0:	4924      	ldr	r1, [pc, #144]	; (8000584 <main+0xbc>)
 80004f2:	4826      	ldr	r0, [pc, #152]	; (800058c <main+0xc4>)
 80004f4:	f003 fb3c 	bl	8003b70 <f_mount>
 80004f8:	4603      	mov	r3, r0
 80004fa:	461a      	mov	r2, r3
 80004fc:	4b24      	ldr	r3, [pc, #144]	; (8000590 <main+0xc8>)
 80004fe:	701a      	strb	r2, [r3, #0]
  if (fres != FR_OK)
 8000500:	4b23      	ldr	r3, [pc, #140]	; (8000590 <main+0xc8>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d000      	beq.n	800050a <main+0x42>
  {
    while(1);
 8000508:	e7fe      	b.n	8000508 <main+0x40>
  }


  fres = f_open(&SFLASHPath, "test", FA_CREATE_ALWAYS | FA_WRITE);
 800050a:	220a      	movs	r2, #10
 800050c:	4921      	ldr	r1, [pc, #132]	; (8000594 <main+0xcc>)
 800050e:	481d      	ldr	r0, [pc, #116]	; (8000584 <main+0xbc>)
 8000510:	f003 fb74 	bl	8003bfc <f_open>
 8000514:	4603      	mov	r3, r0
 8000516:	461a      	mov	r2, r3
 8000518:	4b1d      	ldr	r3, [pc, #116]	; (8000590 <main+0xc8>)
 800051a:	701a      	strb	r2, [r3, #0]
  if (fres != FR_OK)
 800051c:	4b1c      	ldr	r3, [pc, #112]	; (8000590 <main+0xc8>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d000      	beq.n	8000526 <main+0x5e>
  {
 	 while(1);
 8000524:	e7fe      	b.n	8000524 <main+0x5c>
  }
  else
  {
	  fres = f_write(&SFLASHPath, &str, sizeof(str), bw);
 8000526:	4b1c      	ldr	r3, [pc, #112]	; (8000598 <main+0xd0>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	2264      	movs	r2, #100	; 0x64
 800052c:	491b      	ldr	r1, [pc, #108]	; (800059c <main+0xd4>)
 800052e:	4815      	ldr	r0, [pc, #84]	; (8000584 <main+0xbc>)
 8000530:	f003 fe61 	bl	80041f6 <f_write>
 8000534:	4603      	mov	r3, r0
 8000536:	461a      	mov	r2, r3
 8000538:	4b15      	ldr	r3, [pc, #84]	; (8000590 <main+0xc8>)
 800053a:	701a      	strb	r2, [r3, #0]
	  fres = f_close(&SFLASHPath);
 800053c:	4811      	ldr	r0, [pc, #68]	; (8000584 <main+0xbc>)
 800053e:	f004 f84d 	bl	80045dc <f_close>
 8000542:	4603      	mov	r3, r0
 8000544:	461a      	mov	r2, r3
 8000546:	4b12      	ldr	r3, [pc, #72]	; (8000590 <main+0xc8>)
 8000548:	701a      	strb	r2, [r3, #0]
  }


  fres = f_open(&SFLASHPath, "test", FA_READ);
 800054a:	2201      	movs	r2, #1
 800054c:	4911      	ldr	r1, [pc, #68]	; (8000594 <main+0xcc>)
 800054e:	480d      	ldr	r0, [pc, #52]	; (8000584 <main+0xbc>)
 8000550:	f003 fb54 	bl	8003bfc <f_open>
 8000554:	4603      	mov	r3, r0
 8000556:	461a      	mov	r2, r3
 8000558:	4b0d      	ldr	r3, [pc, #52]	; (8000590 <main+0xc8>)
 800055a:	701a      	strb	r2, [r3, #0]
  if (fres != FR_OK)
 800055c:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <main+0xc8>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d000      	beq.n	8000566 <main+0x9e>
  {
	  while(1);
 8000564:	e7fe      	b.n	8000564 <main+0x9c>
  }
  else
  {
	  fres = f_read(&SFLASHPath, &buffer, 11, bw);
 8000566:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <main+0xd0>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	220b      	movs	r2, #11
 800056c:	490c      	ldr	r1, [pc, #48]	; (80005a0 <main+0xd8>)
 800056e:	4805      	ldr	r0, [pc, #20]	; (8000584 <main+0xbc>)
 8000570:	f003 fd02 	bl	8003f78 <f_read>
 8000574:	4603      	mov	r3, r0
 8000576:	461a      	mov	r2, r3
 8000578:	4b05      	ldr	r3, [pc, #20]	; (8000590 <main+0xc8>)
 800057a:	701a      	strb	r2, [r3, #0]
  }
  f_close(&SFLASHPath);
 800057c:	4801      	ldr	r0, [pc, #4]	; (8000584 <main+0xbc>)
 800057e:	f004 f82d 	bl	80045dc <f_close>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000582:	e7fe      	b.n	8000582 <main+0xba>
 8000584:	20000508 	.word	0x20000508
 8000588:	20000070 	.word	0x20000070
 800058c:	200000d4 	.word	0x200000d4
 8000590:	20000790 	.word	0x20000790
 8000594:	08004758 	.word	0x08004758
 8000598:	20000504 	.word	0x20000504
 800059c:	20000000 	.word	0x20000000
 80005a0:	20000304 	.word	0x20000304

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b094      	sub	sp, #80	; 0x50
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 0320 	add.w	r3, r7, #32
 80005ae:	2230      	movs	r2, #48	; 0x30
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f004 f8bc 	bl	8004730 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	f107 030c 	add.w	r3, r7, #12
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c8:	2300      	movs	r3, #0
 80005ca:	60bb      	str	r3, [r7, #8]
 80005cc:	4b28      	ldr	r3, [pc, #160]	; (8000670 <SystemClock_Config+0xcc>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d0:	4a27      	ldr	r2, [pc, #156]	; (8000670 <SystemClock_Config+0xcc>)
 80005d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d6:	6413      	str	r3, [r2, #64]	; 0x40
 80005d8:	4b25      	ldr	r3, [pc, #148]	; (8000670 <SystemClock_Config+0xcc>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e0:	60bb      	str	r3, [r7, #8]
 80005e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e4:	2300      	movs	r3, #0
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	4b22      	ldr	r3, [pc, #136]	; (8000674 <SystemClock_Config+0xd0>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a21      	ldr	r2, [pc, #132]	; (8000674 <SystemClock_Config+0xd0>)
 80005ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005f2:	6013      	str	r3, [r2, #0]
 80005f4:	4b1f      	ldr	r3, [pc, #124]	; (8000674 <SystemClock_Config+0xd0>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000600:	2301      	movs	r3, #1
 8000602:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000604:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000608:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060a:	2302      	movs	r3, #2
 800060c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800060e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000612:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000614:	2304      	movs	r3, #4
 8000616:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000618:	23a8      	movs	r3, #168	; 0xa8
 800061a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800061c:	2302      	movs	r3, #2
 800061e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000620:	2304      	movs	r3, #4
 8000622:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000624:	f107 0320 	add.w	r3, r7, #32
 8000628:	4618      	mov	r0, r3
 800062a:	f000 fdd7 	bl	80011dc <HAL_RCC_OscConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000634:	f000 f898 	bl	8000768 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000638:	230f      	movs	r3, #15
 800063a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063c:	2302      	movs	r3, #2
 800063e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000644:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000648:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800064a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800064e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	2105      	movs	r1, #5
 8000656:	4618      	mov	r0, r3
 8000658:	f001 f830 	bl	80016bc <HAL_RCC_ClockConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000662:	f000 f881 	bl	8000768 <Error_Handler>
  }
}
 8000666:	bf00      	nop
 8000668:	3750      	adds	r7, #80	; 0x50
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40023800 	.word	0x40023800
 8000674:	40007000 	.word	0x40007000

08000678 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <MX_SPI1_Init+0x64>)
 800067e:	4a18      	ldr	r2, [pc, #96]	; (80006e0 <MX_SPI1_Init+0x68>)
 8000680:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <MX_SPI1_Init+0x64>)
 8000684:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000688:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800068a:	4b14      	ldr	r3, [pc, #80]	; (80006dc <MX_SPI1_Init+0x64>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000690:	4b12      	ldr	r3, [pc, #72]	; (80006dc <MX_SPI1_Init+0x64>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000696:	4b11      	ldr	r3, [pc, #68]	; (80006dc <MX_SPI1_Init+0x64>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800069c:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <MX_SPI1_Init+0x64>)
 800069e:	2200      	movs	r2, #0
 80006a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006a2:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <MX_SPI1_Init+0x64>)
 80006a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80006aa:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <MX_SPI1_Init+0x64>)
 80006ac:	2210      	movs	r2, #16
 80006ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006b0:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <MX_SPI1_Init+0x64>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006b6:	4b09      	ldr	r3, [pc, #36]	; (80006dc <MX_SPI1_Init+0x64>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006bc:	4b07      	ldr	r3, [pc, #28]	; (80006dc <MX_SPI1_Init+0x64>)
 80006be:	2200      	movs	r2, #0
 80006c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006c2:	4b06      	ldr	r3, [pc, #24]	; (80006dc <MX_SPI1_Init+0x64>)
 80006c4:	220a      	movs	r2, #10
 80006c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006c8:	4804      	ldr	r0, [pc, #16]	; (80006dc <MX_SPI1_Init+0x64>)
 80006ca:	f001 f9b5 	bl	8001a38 <HAL_SPI_Init>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006d4:	f000 f848 	bl	8000768 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000738 	.word	0x20000738
 80006e0:	40013000 	.word	0x40013000

080006e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b088      	sub	sp, #32
 80006e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ea:	f107 030c 	add.w	r3, r7, #12
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]
 80006f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	60bb      	str	r3, [r7, #8]
 80006fe:	4b18      	ldr	r3, [pc, #96]	; (8000760 <MX_GPIO_Init+0x7c>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a17      	ldr	r2, [pc, #92]	; (8000760 <MX_GPIO_Init+0x7c>)
 8000704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b15      	ldr	r3, [pc, #84]	; (8000760 <MX_GPIO_Init+0x7c>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000712:	60bb      	str	r3, [r7, #8]
 8000714:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_GPIO_Init+0x7c>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a10      	ldr	r2, [pc, #64]	; (8000760 <MX_GPIO_Init+0x7c>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <MX_GPIO_Init+0x7c>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000732:	2200      	movs	r2, #0
 8000734:	2110      	movs	r1, #16
 8000736:	480b      	ldr	r0, [pc, #44]	; (8000764 <MX_GPIO_Init+0x80>)
 8000738:	f000 fd36 	bl	80011a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800073c:	2310      	movs	r3, #16
 800073e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000740:	2301      	movs	r3, #1
 8000742:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000744:	2300      	movs	r3, #0
 8000746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000748:	2300      	movs	r3, #0
 800074a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	4619      	mov	r1, r3
 8000752:	4804      	ldr	r0, [pc, #16]	; (8000764 <MX_GPIO_Init+0x80>)
 8000754:	f000 fb8e 	bl	8000e74 <HAL_GPIO_Init>

}
 8000758:	bf00      	nop
 800075a:	3720      	adds	r7, #32
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40023800 	.word	0x40023800
 8000764:	40020000 	.word	0x40020000

08000768 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800076c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800076e:	e7fe      	b.n	800076e <Error_Handler+0x6>

08000770 <SPIFLASH_disk_initialize>:
#include "spi_flash.h"

extern SPI_HandleTypeDef hspi1;

int32_t SPIFLASH_disk_initialize(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
	return 0;
 8000774:	2300      	movs	r3, #0
}
 8000776:	4618      	mov	r0, r3
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr

08000780 <SPI_Read_Byte>:



uint8_t SPI_Read_Byte(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
	return (SPI_Write_Byte(0xFF));
 8000784:	20ff      	movs	r0, #255	; 0xff
 8000786:	f000 f803 	bl	8000790 <SPI_Write_Byte>
 800078a:	4603      	mov	r3, r0
}
 800078c:	4618      	mov	r0, r3
 800078e:	bd80      	pop	{r7, pc}

08000790 <SPI_Write_Byte>:

uint8_t SPI_Write_Byte(uint8_t data)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b086      	sub	sp, #24
 8000794:	af02      	add	r7, sp, #8
 8000796:	4603      	mov	r3, r0
 8000798:	71fb      	strb	r3, [r7, #7]
	char read_data;

	HAL_SPI_TransmitReceive(&hspi1, &data, &read_data, 1, 1);
 800079a:	f107 020f 	add.w	r2, r7, #15
 800079e:	1df9      	adds	r1, r7, #7
 80007a0:	2301      	movs	r3, #1
 80007a2:	9300      	str	r3, [sp, #0]
 80007a4:	2301      	movs	r3, #1
 80007a6:	4804      	ldr	r0, [pc, #16]	; (80007b8 <SPI_Write_Byte+0x28>)
 80007a8:	f001 f9aa 	bl	8001b00 <HAL_SPI_TransmitReceive>
	return read_data;
 80007ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	3710      	adds	r7, #16
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000738 	.word	0x20000738

080007bc <W25X_Read_StatusReg>:
}
#endif

#if USE_READ_STATUSREG
char W25X_Read_StatusReg(void)
{	char u8 = 0;
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	2300      	movs	r3, #0
 80007c4:	71fb      	strb	r3, [r7, #7]
	FLASH_CS_0();
 80007c6:	2200      	movs	r2, #0
 80007c8:	2110      	movs	r1, #16
 80007ca:	480a      	ldr	r0, [pc, #40]	; (80007f4 <W25X_Read_StatusReg+0x38>)
 80007cc:	f000 fcec 	bl	80011a8 <HAL_GPIO_WritePin>
	SPI_Write_Byte(W25X_ReadStatusReg);
 80007d0:	2005      	movs	r0, #5
 80007d2:	f7ff ffdd 	bl	8000790 <SPI_Write_Byte>
	u8 = SPI_Read_Byte();
 80007d6:	f7ff ffd3 	bl	8000780 <SPI_Read_Byte>
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]
	FLASH_CS_1();	
 80007de:	2201      	movs	r2, #1
 80007e0:	2110      	movs	r1, #16
 80007e2:	4804      	ldr	r0, [pc, #16]	; (80007f4 <W25X_Read_StatusReg+0x38>)
 80007e4:	f000 fce0 	bl	80011a8 <HAL_GPIO_WritePin>
	return u8;
 80007e8:	79fb      	ldrb	r3, [r7, #7]
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40020000 	.word	0x40020000

080007f8 <W25X_Write_Enable>:
}
#endif

#if USE_WRITE_ENABLE
void W25X_Write_Enable(void)
{	FLASH_CS_0();
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	2200      	movs	r2, #0
 80007fe:	2110      	movs	r1, #16
 8000800:	4806      	ldr	r0, [pc, #24]	; (800081c <W25X_Write_Enable+0x24>)
 8000802:	f000 fcd1 	bl	80011a8 <HAL_GPIO_WritePin>
	SPI_Write_Byte(W25X_WriteEnable);
 8000806:	2006      	movs	r0, #6
 8000808:	f7ff ffc2 	bl	8000790 <SPI_Write_Byte>
	FLASH_CS_1();
 800080c:	2201      	movs	r2, #1
 800080e:	2110      	movs	r1, #16
 8000810:	4802      	ldr	r0, [pc, #8]	; (800081c <W25X_Write_Enable+0x24>)
 8000812:	f000 fcc9 	bl	80011a8 <HAL_GPIO_WritePin>
}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40020000 	.word	0x40020000

08000820 <W25X_Wait_Busy>:
}
#endif

#if USE_WAIT_BUSY
void W25X_Wait_Busy(void)
{	while(W25X_Read_StatusReg() == 0x03)
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
 8000824:	e001      	b.n	800082a <W25X_Wait_Busy+0xa>
		W25X_Read_StatusReg();
 8000826:	f7ff ffc9 	bl	80007bc <W25X_Read_StatusReg>
{	while(W25X_Read_StatusReg() == 0x03)
 800082a:	f7ff ffc7 	bl	80007bc <W25X_Read_StatusReg>
 800082e:	4603      	mov	r3, r0
 8000830:	2b03      	cmp	r3, #3
 8000832:	d0f8      	beq.n	8000826 <W25X_Wait_Busy+0x6>
}
 8000834:	bf00      	nop
 8000836:	bd80      	pop	{r7, pc}

08000838 <W25X_Erase_Sector>:
#endif

#if USE_ERASE_SECTOR
void W25X_Erase_Sector(uint32_t nDest)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
	nDest *= FLASH_SECTOR_SIZE;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	025b      	lsls	r3, r3, #9
 8000844:	607b      	str	r3, [r7, #4]
	
	FLASH_CS_0();			
 8000846:	2200      	movs	r2, #0
 8000848:	2110      	movs	r1, #16
 800084a:	4814      	ldr	r0, [pc, #80]	; (800089c <W25X_Erase_Sector+0x64>)
 800084c:	f000 fcac 	bl	80011a8 <HAL_GPIO_WritePin>
	W25X_Write_Enable();
 8000850:	f7ff ffd2 	bl	80007f8 <W25X_Write_Enable>
	FLASH_CS_0();
 8000854:	2200      	movs	r2, #0
 8000856:	2110      	movs	r1, #16
 8000858:	4810      	ldr	r0, [pc, #64]	; (800089c <W25X_Erase_Sector+0x64>)
 800085a:	f000 fca5 	bl	80011a8 <HAL_GPIO_WritePin>
	SPI_Write_Byte(W25X_SectorErase);
 800085e:	2020      	movs	r0, #32
 8000860:	f7ff ff96 	bl	8000790 <SPI_Write_Byte>
	SPI_Write_Byte((char)((nDest & 0xFFFFFF) >> 16));
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	0c1b      	lsrs	r3, r3, #16
 8000868:	b2db      	uxtb	r3, r3
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff ff90 	bl	8000790 <SPI_Write_Byte>
	SPI_Write_Byte((char)((nDest & 0xFFFF) >> 8));
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	0a1b      	lsrs	r3, r3, #8
 8000874:	b2db      	uxtb	r3, r3
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff ff8a 	bl	8000790 <SPI_Write_Byte>
	SPI_Write_Byte((char)nDest & 0xFF);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	b2db      	uxtb	r3, r3
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff ff85 	bl	8000790 <SPI_Write_Byte>
	FLASH_CS_1();
 8000886:	2201      	movs	r2, #1
 8000888:	2110      	movs	r1, #16
 800088a:	4804      	ldr	r0, [pc, #16]	; (800089c <W25X_Erase_Sector+0x64>)
 800088c:	f000 fc8c 	bl	80011a8 <HAL_GPIO_WritePin>
	W25X_Wait_Busy();
 8000890:	f7ff ffc6 	bl	8000820 <W25X_Wait_Busy>
}
 8000894:	bf00      	nop
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40020000 	.word	0x40020000

080008a0 <W25X_Read_Sector>:
}
#endif

#if USE_READ_SECTOR
void W25X_Read_Sector(uint32_t nSector, char* pBuffer)
{	uint16_t i;
 80008a0:	b590      	push	{r4, r7, lr}
 80008a2:	b085      	sub	sp, #20
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	6039      	str	r1, [r7, #0]
	
	//������תΪ��ַ
	nSector *= FLASH_SECTOR_SIZE;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	025b      	lsls	r3, r3, #9
 80008ae:	607b      	str	r3, [r7, #4]
	
	FLASH_CS_0();
 80008b0:	2200      	movs	r2, #0
 80008b2:	2110      	movs	r1, #16
 80008b4:	4819      	ldr	r0, [pc, #100]	; (800091c <W25X_Read_Sector+0x7c>)
 80008b6:	f000 fc77 	bl	80011a8 <HAL_GPIO_WritePin>
	SPI_Write_Byte(W25X_ReadData);
 80008ba:	2003      	movs	r0, #3
 80008bc:	f7ff ff68 	bl	8000790 <SPI_Write_Byte>
	SPI_Write_Byte((char)(nSector >> 16));
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	0c1b      	lsrs	r3, r3, #16
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	4618      	mov	r0, r3
 80008c8:	f7ff ff62 	bl	8000790 <SPI_Write_Byte>
	SPI_Write_Byte((char)(nSector>> 8));
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	0a1b      	lsrs	r3, r3, #8
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	4618      	mov	r0, r3
 80008d4:	f7ff ff5c 	bl	8000790 <SPI_Write_Byte>
	SPI_Write_Byte((char) nSector);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff ff57 	bl	8000790 <SPI_Write_Byte>
	
	for(i=0;i<FLASH_SECTOR_SIZE;i++)
 80008e2:	2300      	movs	r3, #0
 80008e4:	81fb      	strh	r3, [r7, #14]
 80008e6:	e009      	b.n	80008fc <W25X_Read_Sector+0x5c>
	{	pBuffer[i] = SPI_Read_Byte();
 80008e8:	89fb      	ldrh	r3, [r7, #14]
 80008ea:	683a      	ldr	r2, [r7, #0]
 80008ec:	18d4      	adds	r4, r2, r3
 80008ee:	f7ff ff47 	bl	8000780 <SPI_Read_Byte>
 80008f2:	4603      	mov	r3, r0
 80008f4:	7023      	strb	r3, [r4, #0]
	for(i=0;i<FLASH_SECTOR_SIZE;i++)
 80008f6:	89fb      	ldrh	r3, [r7, #14]
 80008f8:	3301      	adds	r3, #1
 80008fa:	81fb      	strh	r3, [r7, #14]
 80008fc:	89fb      	ldrh	r3, [r7, #14]
 80008fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000902:	d3f1      	bcc.n	80008e8 <W25X_Read_Sector+0x48>
	}
	FLASH_CS_1();
 8000904:	2201      	movs	r2, #1
 8000906:	2110      	movs	r1, #16
 8000908:	4804      	ldr	r0, [pc, #16]	; (800091c <W25X_Read_Sector+0x7c>)
 800090a:	f000 fc4d 	bl	80011a8 <HAL_GPIO_WritePin>
	W25X_Wait_Busy();
 800090e:	f7ff ff87 	bl	8000820 <W25X_Wait_Busy>
}
 8000912:	bf00      	nop
 8000914:	3714      	adds	r7, #20
 8000916:	46bd      	mov	sp, r7
 8000918:	bd90      	pop	{r4, r7, pc}
 800091a:	bf00      	nop
 800091c:	40020000 	.word	0x40020000

08000920 <W25X_Write_Sector>:
}
#endif

#if USE_WRITE_SECTOR
void W25X_Write_Sector(uint32_t nSector, char* pBuffer)
{	
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	6039      	str	r1, [r7, #0]
	int i,j;
	
	//������תΪ��ַ
	nSector *= FLASH_SECTOR_SIZE;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	025b      	lsls	r3, r3, #9
 800092e:	607b      	str	r3, [r7, #4]
	
	//һ��������Ҫ����ҳ
	for(j=0;j<FLASH_PAGES_PER_SECTOR;j++)
 8000930:	2300      	movs	r3, #0
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	e041      	b.n	80009ba <W25X_Write_Sector+0x9a>
	{
		FLASH_CS_0();
 8000936:	2200      	movs	r2, #0
 8000938:	2110      	movs	r1, #16
 800093a:	4823      	ldr	r0, [pc, #140]	; (80009c8 <W25X_Write_Sector+0xa8>)
 800093c:	f000 fc34 	bl	80011a8 <HAL_GPIO_WritePin>
		W25X_Write_Enable();
 8000940:	f7ff ff5a 	bl	80007f8 <W25X_Write_Enable>
		FLASH_CS_0();
 8000944:	2200      	movs	r2, #0
 8000946:	2110      	movs	r1, #16
 8000948:	481f      	ldr	r0, [pc, #124]	; (80009c8 <W25X_Write_Sector+0xa8>)
 800094a:	f000 fc2d 	bl	80011a8 <HAL_GPIO_WritePin>
		
		SPI_Write_Byte(W25X_PageProgram);
 800094e:	2002      	movs	r0, #2
 8000950:	f7ff ff1e 	bl	8000790 <SPI_Write_Byte>
		SPI_Write_Byte((char)(nSector >> 16));
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	0c1b      	lsrs	r3, r3, #16
 8000958:	b2db      	uxtb	r3, r3
 800095a:	4618      	mov	r0, r3
 800095c:	f7ff ff18 	bl	8000790 <SPI_Write_Byte>
		SPI_Write_Byte((char)(nSector >> 8));
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	0a1b      	lsrs	r3, r3, #8
 8000964:	b2db      	uxtb	r3, r3
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff ff12 	bl	8000790 <SPI_Write_Byte>
		SPI_Write_Byte((char) nSector);
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	b2db      	uxtb	r3, r3
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff ff0d 	bl	8000790 <SPI_Write_Byte>
		
		for(i=0;i<FLASH_PAGE_SIZE;i++)								
 8000976:	2300      	movs	r3, #0
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	e009      	b.n	8000990 <W25X_Write_Sector+0x70>
			SPI_Write_Byte(pBuffer[i]);
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	683a      	ldr	r2, [r7, #0]
 8000980:	4413      	add	r3, r2
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	4618      	mov	r0, r3
 8000986:	f7ff ff03 	bl	8000790 <SPI_Write_Byte>
		for(i=0;i<FLASH_PAGE_SIZE;i++)								
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	3301      	adds	r3, #1
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	2bff      	cmp	r3, #255	; 0xff
 8000994:	ddf2      	ble.n	800097c <W25X_Write_Sector+0x5c>
		
		pBuffer += FLASH_PAGE_SIZE;
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800099c:	603b      	str	r3, [r7, #0]
		nSector += FLASH_PAGE_SIZE;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80009a4:	607b      	str	r3, [r7, #4]

		FLASH_CS_1();
 80009a6:	2201      	movs	r2, #1
 80009a8:	2110      	movs	r1, #16
 80009aa:	4807      	ldr	r0, [pc, #28]	; (80009c8 <W25X_Write_Sector+0xa8>)
 80009ac:	f000 fbfc 	bl	80011a8 <HAL_GPIO_WritePin>
		W25X_Wait_Busy();
 80009b0:	f7ff ff36 	bl	8000820 <W25X_Wait_Busy>
	for(j=0;j<FLASH_PAGES_PER_SECTOR;j++)
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	3301      	adds	r3, #1
 80009b8:	60bb      	str	r3, [r7, #8]
 80009ba:	68bb      	ldr	r3, [r7, #8]
 80009bc:	2b01      	cmp	r3, #1
 80009be:	ddba      	ble.n	8000936 <W25X_Write_Sector+0x16>
	}
}
 80009c0:	bf00      	nop
 80009c2:	3710      	adds	r7, #16
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40020000 	.word	0x40020000

080009cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	607b      	str	r3, [r7, #4]
 80009d6:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <HAL_MspInit+0x4c>)
 80009d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009da:	4a0f      	ldr	r2, [pc, #60]	; (8000a18 <HAL_MspInit+0x4c>)
 80009dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009e0:	6453      	str	r3, [r2, #68]	; 0x44
 80009e2:	4b0d      	ldr	r3, [pc, #52]	; (8000a18 <HAL_MspInit+0x4c>)
 80009e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	603b      	str	r3, [r7, #0]
 80009f2:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <HAL_MspInit+0x4c>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f6:	4a08      	ldr	r2, [pc, #32]	; (8000a18 <HAL_MspInit+0x4c>)
 80009f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009fc:	6413      	str	r3, [r2, #64]	; 0x40
 80009fe:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <HAL_MspInit+0x4c>)
 8000a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a06:	603b      	str	r3, [r7, #0]
 8000a08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	40023800 	.word	0x40023800

08000a1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08a      	sub	sp, #40	; 0x28
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
 8000a32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a19      	ldr	r2, [pc, #100]	; (8000aa0 <HAL_SPI_MspInit+0x84>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d12b      	bne.n	8000a96 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	613b      	str	r3, [r7, #16]
 8000a42:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <HAL_SPI_MspInit+0x88>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a46:	4a17      	ldr	r2, [pc, #92]	; (8000aa4 <HAL_SPI_MspInit+0x88>)
 8000a48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a4e:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <HAL_SPI_MspInit+0x88>)
 8000a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a56:	613b      	str	r3, [r7, #16]
 8000a58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <HAL_SPI_MspInit+0x88>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a10      	ldr	r2, [pc, #64]	; (8000aa4 <HAL_SPI_MspInit+0x88>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <HAL_SPI_MspInit+0x88>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a76:	23e0      	movs	r3, #224	; 0xe0
 8000a78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a82:	2303      	movs	r3, #3
 8000a84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a86:	2305      	movs	r3, #5
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <HAL_SPI_MspInit+0x8c>)
 8000a92:	f000 f9ef 	bl	8000e74 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a96:	bf00      	nop
 8000a98:	3728      	adds	r7, #40	; 0x28
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40013000 	.word	0x40013000
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40020000 	.word	0x40020000

08000aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <NMI_Handler+0x4>

08000ab2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab6:	e7fe      	b.n	8000ab6 <HardFault_Handler+0x4>

08000ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <MemManage_Handler+0x4>

08000abe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac2:	e7fe      	b.n	8000ac2 <BusFault_Handler+0x4>

08000ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <UsageFault_Handler+0x4>

08000aca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af8:	f000 f894 	bl	8000c24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b04:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <SystemInit+0x28>)
 8000b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b0a:	4a07      	ldr	r2, [pc, #28]	; (8000b28 <SystemInit+0x28>)
 8000b0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b14:	4b04      	ldr	r3, [pc, #16]	; (8000b28 <SystemInit+0x28>)
 8000b16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b1a:	609a      	str	r2, [r3, #8]
#endif
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b64 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b30:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b32:	e003      	b.n	8000b3c <LoopCopyDataInit>

08000b34 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b34:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b36:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b38:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b3a:	3104      	adds	r1, #4

08000b3c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b3c:	480b      	ldr	r0, [pc, #44]	; (8000b6c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b40:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b42:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b44:	d3f6      	bcc.n	8000b34 <CopyDataInit>
  ldr  r2, =_sbss
 8000b46:	4a0b      	ldr	r2, [pc, #44]	; (8000b74 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b48:	e002      	b.n	8000b50 <LoopFillZerobss>

08000b4a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b4a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b4c:	f842 3b04 	str.w	r3, [r2], #4

08000b50 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b50:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b52:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b54:	d3f9      	bcc.n	8000b4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b56:	f7ff ffd3 	bl	8000b00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b5a:	f003 fdc5 	bl	80046e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b5e:	f7ff fcb3 	bl	80004c8 <main>
  bx  lr    
 8000b62:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b64:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000b68:	08004844 	.word	0x08004844
  ldr  r0, =_sdata
 8000b6c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b70:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 8000b74:	20000084 	.word	0x20000084
  ldr  r3, = _ebss
 8000b78:	20000c00 	.word	0x20000c00

08000b7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b7c:	e7fe      	b.n	8000b7c <ADC_IRQHandler>
	...

08000b80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b84:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <HAL_Init+0x40>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a0d      	ldr	r2, [pc, #52]	; (8000bc0 <HAL_Init+0x40>)
 8000b8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b90:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <HAL_Init+0x40>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a0a      	ldr	r2, [pc, #40]	; (8000bc0 <HAL_Init+0x40>)
 8000b96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b9c:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <HAL_Init+0x40>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a07      	ldr	r2, [pc, #28]	; (8000bc0 <HAL_Init+0x40>)
 8000ba2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ba6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ba8:	2003      	movs	r0, #3
 8000baa:	f000 f92f 	bl	8000e0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bae:	2000      	movs	r0, #0
 8000bb0:	f000 f808 	bl	8000bc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bb4:	f7ff ff0a 	bl	80009cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bb8:	2300      	movs	r3, #0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40023c00 	.word	0x40023c00

08000bc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bcc:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <HAL_InitTick+0x54>)
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <HAL_InitTick+0x58>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000be2:	4618      	mov	r0, r3
 8000be4:	f000 f939 	bl	8000e5a <HAL_SYSTICK_Config>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e00e      	b.n	8000c10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2b0f      	cmp	r3, #15
 8000bf6:	d80a      	bhi.n	8000c0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	6879      	ldr	r1, [r7, #4]
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	f000 f90f 	bl	8000e22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c04:	4a06      	ldr	r2, [pc, #24]	; (8000c20 <HAL_InitTick+0x5c>)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	e000      	b.n	8000c10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20000064 	.word	0x20000064
 8000c1c:	2000006c 	.word	0x2000006c
 8000c20:	20000068 	.word	0x20000068

08000c24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c28:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <HAL_IncTick+0x20>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <HAL_IncTick+0x24>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4413      	add	r3, r2
 8000c34:	4a04      	ldr	r2, [pc, #16]	; (8000c48 <HAL_IncTick+0x24>)
 8000c36:	6013      	str	r3, [r2, #0]
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	2000006c 	.word	0x2000006c
 8000c48:	20000794 	.word	0x20000794

08000c4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c50:	4b03      	ldr	r3, [pc, #12]	; (8000c60 <HAL_GetTick+0x14>)
 8000c52:	681b      	ldr	r3, [r3, #0]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	20000794 	.word	0x20000794

08000c64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c6c:	f7ff ffee 	bl	8000c4c <HAL_GetTick>
 8000c70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c7c:	d005      	beq.n	8000c8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c7e:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <HAL_Delay+0x40>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	461a      	mov	r2, r3
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	4413      	add	r3, r2
 8000c88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c8a:	bf00      	nop
 8000c8c:	f7ff ffde 	bl	8000c4c <HAL_GetTick>
 8000c90:	4602      	mov	r2, r0
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	1ad3      	subs	r3, r2, r3
 8000c96:	68fa      	ldr	r2, [r7, #12]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d8f7      	bhi.n	8000c8c <HAL_Delay+0x28>
  {
  }
}
 8000c9c:	bf00      	nop
 8000c9e:	3710      	adds	r7, #16
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	2000006c 	.word	0x2000006c

08000ca8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f003 0307 	and.w	r3, r3, #7
 8000cb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__NVIC_SetPriorityGrouping+0x44>)
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cbe:	68ba      	ldr	r2, [r7, #8]
 8000cc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cda:	4a04      	ldr	r2, [pc, #16]	; (8000cec <__NVIC_SetPriorityGrouping+0x44>)
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	60d3      	str	r3, [r2, #12]
}
 8000ce0:	bf00      	nop
 8000ce2:	3714      	adds	r7, #20
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cf4:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <__NVIC_GetPriorityGrouping+0x18>)
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	0a1b      	lsrs	r3, r3, #8
 8000cfa:	f003 0307 	and.w	r3, r3, #7
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	6039      	str	r1, [r7, #0]
 8000d16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	db0a      	blt.n	8000d36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	b2da      	uxtb	r2, r3
 8000d24:	490c      	ldr	r1, [pc, #48]	; (8000d58 <__NVIC_SetPriority+0x4c>)
 8000d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2a:	0112      	lsls	r2, r2, #4
 8000d2c:	b2d2      	uxtb	r2, r2
 8000d2e:	440b      	add	r3, r1
 8000d30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d34:	e00a      	b.n	8000d4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	b2da      	uxtb	r2, r3
 8000d3a:	4908      	ldr	r1, [pc, #32]	; (8000d5c <__NVIC_SetPriority+0x50>)
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	f003 030f 	and.w	r3, r3, #15
 8000d42:	3b04      	subs	r3, #4
 8000d44:	0112      	lsls	r2, r2, #4
 8000d46:	b2d2      	uxtb	r2, r2
 8000d48:	440b      	add	r3, r1
 8000d4a:	761a      	strb	r2, [r3, #24]
}
 8000d4c:	bf00      	nop
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	e000e100 	.word	0xe000e100
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b089      	sub	sp, #36	; 0x24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	60f8      	str	r0, [r7, #12]
 8000d68:	60b9      	str	r1, [r7, #8]
 8000d6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	f1c3 0307 	rsb	r3, r3, #7
 8000d7a:	2b04      	cmp	r3, #4
 8000d7c:	bf28      	it	cs
 8000d7e:	2304      	movcs	r3, #4
 8000d80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	3304      	adds	r3, #4
 8000d86:	2b06      	cmp	r3, #6
 8000d88:	d902      	bls.n	8000d90 <NVIC_EncodePriority+0x30>
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	3b03      	subs	r3, #3
 8000d8e:	e000      	b.n	8000d92 <NVIC_EncodePriority+0x32>
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d94:	f04f 32ff 	mov.w	r2, #4294967295
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	43da      	mvns	r2, r3
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	401a      	ands	r2, r3
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	fa01 f303 	lsl.w	r3, r1, r3
 8000db2:	43d9      	mvns	r1, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db8:	4313      	orrs	r3, r2
         );
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3724      	adds	r7, #36	; 0x24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
	...

08000dc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dd8:	d301      	bcc.n	8000dde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e00f      	b.n	8000dfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dde:	4a0a      	ldr	r2, [pc, #40]	; (8000e08 <SysTick_Config+0x40>)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	3b01      	subs	r3, #1
 8000de4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000de6:	210f      	movs	r1, #15
 8000de8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dec:	f7ff ff8e 	bl	8000d0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000df0:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <SysTick_Config+0x40>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000df6:	4b04      	ldr	r3, [pc, #16]	; (8000e08 <SysTick_Config+0x40>)
 8000df8:	2207      	movs	r2, #7
 8000dfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	e000e010 	.word	0xe000e010

08000e0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f7ff ff47 	bl	8000ca8 <__NVIC_SetPriorityGrouping>
}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b086      	sub	sp, #24
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	4603      	mov	r3, r0
 8000e2a:	60b9      	str	r1, [r7, #8]
 8000e2c:	607a      	str	r2, [r7, #4]
 8000e2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e34:	f7ff ff5c 	bl	8000cf0 <__NVIC_GetPriorityGrouping>
 8000e38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e3a:	687a      	ldr	r2, [r7, #4]
 8000e3c:	68b9      	ldr	r1, [r7, #8]
 8000e3e:	6978      	ldr	r0, [r7, #20]
 8000e40:	f7ff ff8e 	bl	8000d60 <NVIC_EncodePriority>
 8000e44:	4602      	mov	r2, r0
 8000e46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e4a:	4611      	mov	r1, r2
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff ff5d 	bl	8000d0c <__NVIC_SetPriority>
}
 8000e52:	bf00      	nop
 8000e54:	3718      	adds	r7, #24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b082      	sub	sp, #8
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f7ff ffb0 	bl	8000dc8 <SysTick_Config>
 8000e68:	4603      	mov	r3, r0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
	...

08000e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b089      	sub	sp, #36	; 0x24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e82:	2300      	movs	r3, #0
 8000e84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e86:	2300      	movs	r3, #0
 8000e88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61fb      	str	r3, [r7, #28]
 8000e8e:	e16b      	b.n	8001168 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e90:	2201      	movs	r2, #1
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	697a      	ldr	r2, [r7, #20]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	f040 815a 	bne.w	8001162 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d00b      	beq.n	8000ece <HAL_GPIO_Init+0x5a>
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d007      	beq.n	8000ece <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ec2:	2b11      	cmp	r3, #17
 8000ec4:	d003      	beq.n	8000ece <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	2b12      	cmp	r3, #18
 8000ecc:	d130      	bne.n	8000f30 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	2203      	movs	r2, #3
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	68da      	ldr	r2, [r3, #12]
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f04:	2201      	movs	r2, #1
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4013      	ands	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	091b      	lsrs	r3, r3, #4
 8000f1a:	f003 0201 	and.w	r2, r3, #1
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	2203      	movs	r2, #3
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	43db      	mvns	r3, r3
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4013      	ands	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	689a      	ldr	r2, [r3, #8]
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d003      	beq.n	8000f70 <HAL_GPIO_Init+0xfc>
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	2b12      	cmp	r3, #18
 8000f6e:	d123      	bne.n	8000fb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	08da      	lsrs	r2, r3, #3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3208      	adds	r2, #8
 8000f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	f003 0307 	and.w	r3, r3, #7
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	220f      	movs	r2, #15
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	4013      	ands	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	691a      	ldr	r2, [r3, #16]
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	f003 0307 	and.w	r3, r3, #7
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	08da      	lsrs	r2, r3, #3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	3208      	adds	r2, #8
 8000fb2:	69b9      	ldr	r1, [r7, #24]
 8000fb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	2203      	movs	r2, #3
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f003 0203 	and.w	r2, r3, #3
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	f000 80b4 	beq.w	8001162 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	4b5f      	ldr	r3, [pc, #380]	; (800117c <HAL_GPIO_Init+0x308>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001002:	4a5e      	ldr	r2, [pc, #376]	; (800117c <HAL_GPIO_Init+0x308>)
 8001004:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001008:	6453      	str	r3, [r2, #68]	; 0x44
 800100a:	4b5c      	ldr	r3, [pc, #368]	; (800117c <HAL_GPIO_Init+0x308>)
 800100c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001016:	4a5a      	ldr	r2, [pc, #360]	; (8001180 <HAL_GPIO_Init+0x30c>)
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	089b      	lsrs	r3, r3, #2
 800101c:	3302      	adds	r3, #2
 800101e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001022:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	f003 0303 	and.w	r3, r3, #3
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	220f      	movs	r2, #15
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43db      	mvns	r3, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4013      	ands	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a51      	ldr	r2, [pc, #324]	; (8001184 <HAL_GPIO_Init+0x310>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d02b      	beq.n	800109a <HAL_GPIO_Init+0x226>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a50      	ldr	r2, [pc, #320]	; (8001188 <HAL_GPIO_Init+0x314>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d025      	beq.n	8001096 <HAL_GPIO_Init+0x222>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a4f      	ldr	r2, [pc, #316]	; (800118c <HAL_GPIO_Init+0x318>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d01f      	beq.n	8001092 <HAL_GPIO_Init+0x21e>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a4e      	ldr	r2, [pc, #312]	; (8001190 <HAL_GPIO_Init+0x31c>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d019      	beq.n	800108e <HAL_GPIO_Init+0x21a>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a4d      	ldr	r2, [pc, #308]	; (8001194 <HAL_GPIO_Init+0x320>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d013      	beq.n	800108a <HAL_GPIO_Init+0x216>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a4c      	ldr	r2, [pc, #304]	; (8001198 <HAL_GPIO_Init+0x324>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d00d      	beq.n	8001086 <HAL_GPIO_Init+0x212>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a4b      	ldr	r2, [pc, #300]	; (800119c <HAL_GPIO_Init+0x328>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d007      	beq.n	8001082 <HAL_GPIO_Init+0x20e>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a4a      	ldr	r2, [pc, #296]	; (80011a0 <HAL_GPIO_Init+0x32c>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d101      	bne.n	800107e <HAL_GPIO_Init+0x20a>
 800107a:	2307      	movs	r3, #7
 800107c:	e00e      	b.n	800109c <HAL_GPIO_Init+0x228>
 800107e:	2308      	movs	r3, #8
 8001080:	e00c      	b.n	800109c <HAL_GPIO_Init+0x228>
 8001082:	2306      	movs	r3, #6
 8001084:	e00a      	b.n	800109c <HAL_GPIO_Init+0x228>
 8001086:	2305      	movs	r3, #5
 8001088:	e008      	b.n	800109c <HAL_GPIO_Init+0x228>
 800108a:	2304      	movs	r3, #4
 800108c:	e006      	b.n	800109c <HAL_GPIO_Init+0x228>
 800108e:	2303      	movs	r3, #3
 8001090:	e004      	b.n	800109c <HAL_GPIO_Init+0x228>
 8001092:	2302      	movs	r3, #2
 8001094:	e002      	b.n	800109c <HAL_GPIO_Init+0x228>
 8001096:	2301      	movs	r3, #1
 8001098:	e000      	b.n	800109c <HAL_GPIO_Init+0x228>
 800109a:	2300      	movs	r3, #0
 800109c:	69fa      	ldr	r2, [r7, #28]
 800109e:	f002 0203 	and.w	r2, r2, #3
 80010a2:	0092      	lsls	r2, r2, #2
 80010a4:	4093      	lsls	r3, r2
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010ac:	4934      	ldr	r1, [pc, #208]	; (8001180 <HAL_GPIO_Init+0x30c>)
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	089b      	lsrs	r3, r3, #2
 80010b2:	3302      	adds	r3, #2
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010ba:	4b3a      	ldr	r3, [pc, #232]	; (80011a4 <HAL_GPIO_Init+0x330>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	43db      	mvns	r3, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4013      	ands	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d003      	beq.n	80010de <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	4313      	orrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010de:	4a31      	ldr	r2, [pc, #196]	; (80011a4 <HAL_GPIO_Init+0x330>)
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010e4:	4b2f      	ldr	r3, [pc, #188]	; (80011a4 <HAL_GPIO_Init+0x330>)
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	43db      	mvns	r3, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4013      	ands	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d003      	beq.n	8001108 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	4313      	orrs	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001108:	4a26      	ldr	r2, [pc, #152]	; (80011a4 <HAL_GPIO_Init+0x330>)
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800110e:	4b25      	ldr	r3, [pc, #148]	; (80011a4 <HAL_GPIO_Init+0x330>)
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	43db      	mvns	r3, r3
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	4013      	ands	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d003      	beq.n	8001132 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	4313      	orrs	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001132:	4a1c      	ldr	r2, [pc, #112]	; (80011a4 <HAL_GPIO_Init+0x330>)
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001138:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <HAL_GPIO_Init+0x330>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	43db      	mvns	r3, r3
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4013      	ands	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d003      	beq.n	800115c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	4313      	orrs	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800115c:	4a11      	ldr	r2, [pc, #68]	; (80011a4 <HAL_GPIO_Init+0x330>)
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	3301      	adds	r3, #1
 8001166:	61fb      	str	r3, [r7, #28]
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	2b0f      	cmp	r3, #15
 800116c:	f67f ae90 	bls.w	8000e90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001170:	bf00      	nop
 8001172:	3724      	adds	r7, #36	; 0x24
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	40023800 	.word	0x40023800
 8001180:	40013800 	.word	0x40013800
 8001184:	40020000 	.word	0x40020000
 8001188:	40020400 	.word	0x40020400
 800118c:	40020800 	.word	0x40020800
 8001190:	40020c00 	.word	0x40020c00
 8001194:	40021000 	.word	0x40021000
 8001198:	40021400 	.word	0x40021400
 800119c:	40021800 	.word	0x40021800
 80011a0:	40021c00 	.word	0x40021c00
 80011a4:	40013c00 	.word	0x40013c00

080011a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	460b      	mov	r3, r1
 80011b2:	807b      	strh	r3, [r7, #2]
 80011b4:	4613      	mov	r3, r2
 80011b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011b8:	787b      	ldrb	r3, [r7, #1]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011be:	887a      	ldrh	r2, [r7, #2]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011c4:	e003      	b.n	80011ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011c6:	887b      	ldrh	r3, [r7, #2]
 80011c8:	041a      	lsls	r2, r3, #16
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	619a      	str	r2, [r3, #24]
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
	...

080011dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d101      	bne.n	80011ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e25b      	b.n	80016a6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d075      	beq.n	80012e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011fa:	4ba3      	ldr	r3, [pc, #652]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f003 030c 	and.w	r3, r3, #12
 8001202:	2b04      	cmp	r3, #4
 8001204:	d00c      	beq.n	8001220 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001206:	4ba0      	ldr	r3, [pc, #640]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800120e:	2b08      	cmp	r3, #8
 8001210:	d112      	bne.n	8001238 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001212:	4b9d      	ldr	r3, [pc, #628]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800121a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800121e:	d10b      	bne.n	8001238 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001220:	4b99      	ldr	r3, [pc, #612]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d05b      	beq.n	80012e4 <HAL_RCC_OscConfig+0x108>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d157      	bne.n	80012e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e236      	b.n	80016a6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001240:	d106      	bne.n	8001250 <HAL_RCC_OscConfig+0x74>
 8001242:	4b91      	ldr	r3, [pc, #580]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a90      	ldr	r2, [pc, #576]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 8001248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800124c:	6013      	str	r3, [r2, #0]
 800124e:	e01d      	b.n	800128c <HAL_RCC_OscConfig+0xb0>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001258:	d10c      	bne.n	8001274 <HAL_RCC_OscConfig+0x98>
 800125a:	4b8b      	ldr	r3, [pc, #556]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a8a      	ldr	r2, [pc, #552]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 8001260:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001264:	6013      	str	r3, [r2, #0]
 8001266:	4b88      	ldr	r3, [pc, #544]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a87      	ldr	r2, [pc, #540]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 800126c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001270:	6013      	str	r3, [r2, #0]
 8001272:	e00b      	b.n	800128c <HAL_RCC_OscConfig+0xb0>
 8001274:	4b84      	ldr	r3, [pc, #528]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a83      	ldr	r2, [pc, #524]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 800127a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800127e:	6013      	str	r3, [r2, #0]
 8001280:	4b81      	ldr	r3, [pc, #516]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a80      	ldr	r2, [pc, #512]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 8001286:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800128a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d013      	beq.n	80012bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001294:	f7ff fcda 	bl	8000c4c <HAL_GetTick>
 8001298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800129a:	e008      	b.n	80012ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800129c:	f7ff fcd6 	bl	8000c4c <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	2b64      	cmp	r3, #100	; 0x64
 80012a8:	d901      	bls.n	80012ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e1fb      	b.n	80016a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ae:	4b76      	ldr	r3, [pc, #472]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d0f0      	beq.n	800129c <HAL_RCC_OscConfig+0xc0>
 80012ba:	e014      	b.n	80012e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012bc:	f7ff fcc6 	bl	8000c4c <HAL_GetTick>
 80012c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012c2:	e008      	b.n	80012d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012c4:	f7ff fcc2 	bl	8000c4c <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b64      	cmp	r3, #100	; 0x64
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e1e7      	b.n	80016a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012d6:	4b6c      	ldr	r3, [pc, #432]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d1f0      	bne.n	80012c4 <HAL_RCC_OscConfig+0xe8>
 80012e2:	e000      	b.n	80012e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d063      	beq.n	80013ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012f2:	4b65      	ldr	r3, [pc, #404]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f003 030c 	and.w	r3, r3, #12
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d00b      	beq.n	8001316 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012fe:	4b62      	ldr	r3, [pc, #392]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001306:	2b08      	cmp	r3, #8
 8001308:	d11c      	bne.n	8001344 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800130a:	4b5f      	ldr	r3, [pc, #380]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d116      	bne.n	8001344 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001316:	4b5c      	ldr	r3, [pc, #368]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d005      	beq.n	800132e <HAL_RCC_OscConfig+0x152>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d001      	beq.n	800132e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e1bb      	b.n	80016a6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800132e:	4b56      	ldr	r3, [pc, #344]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	691b      	ldr	r3, [r3, #16]
 800133a:	00db      	lsls	r3, r3, #3
 800133c:	4952      	ldr	r1, [pc, #328]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 800133e:	4313      	orrs	r3, r2
 8001340:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001342:	e03a      	b.n	80013ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d020      	beq.n	800138e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800134c:	4b4f      	ldr	r3, [pc, #316]	; (800148c <HAL_RCC_OscConfig+0x2b0>)
 800134e:	2201      	movs	r2, #1
 8001350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001352:	f7ff fc7b 	bl	8000c4c <HAL_GetTick>
 8001356:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001358:	e008      	b.n	800136c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800135a:	f7ff fc77 	bl	8000c4c <HAL_GetTick>
 800135e:	4602      	mov	r2, r0
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	2b02      	cmp	r3, #2
 8001366:	d901      	bls.n	800136c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001368:	2303      	movs	r3, #3
 800136a:	e19c      	b.n	80016a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800136c:	4b46      	ldr	r3, [pc, #280]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0302 	and.w	r3, r3, #2
 8001374:	2b00      	cmp	r3, #0
 8001376:	d0f0      	beq.n	800135a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001378:	4b43      	ldr	r3, [pc, #268]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	691b      	ldr	r3, [r3, #16]
 8001384:	00db      	lsls	r3, r3, #3
 8001386:	4940      	ldr	r1, [pc, #256]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 8001388:	4313      	orrs	r3, r2
 800138a:	600b      	str	r3, [r1, #0]
 800138c:	e015      	b.n	80013ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800138e:	4b3f      	ldr	r3, [pc, #252]	; (800148c <HAL_RCC_OscConfig+0x2b0>)
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001394:	f7ff fc5a 	bl	8000c4c <HAL_GetTick>
 8001398:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800139a:	e008      	b.n	80013ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800139c:	f7ff fc56 	bl	8000c4c <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e17b      	b.n	80016a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ae:	4b36      	ldr	r3, [pc, #216]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1f0      	bne.n	800139c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0308 	and.w	r3, r3, #8
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d030      	beq.n	8001428 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	695b      	ldr	r3, [r3, #20]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d016      	beq.n	80013fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013ce:	4b30      	ldr	r3, [pc, #192]	; (8001490 <HAL_RCC_OscConfig+0x2b4>)
 80013d0:	2201      	movs	r2, #1
 80013d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d4:	f7ff fc3a 	bl	8000c4c <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013dc:	f7ff fc36 	bl	8000c4c <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e15b      	b.n	80016a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ee:	4b26      	ldr	r3, [pc, #152]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 80013f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d0f0      	beq.n	80013dc <HAL_RCC_OscConfig+0x200>
 80013fa:	e015      	b.n	8001428 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013fc:	4b24      	ldr	r3, [pc, #144]	; (8001490 <HAL_RCC_OscConfig+0x2b4>)
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001402:	f7ff fc23 	bl	8000c4c <HAL_GetTick>
 8001406:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001408:	e008      	b.n	800141c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800140a:	f7ff fc1f 	bl	8000c4c <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	2b02      	cmp	r3, #2
 8001416:	d901      	bls.n	800141c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e144      	b.n	80016a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800141c:	4b1a      	ldr	r3, [pc, #104]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 800141e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1f0      	bne.n	800140a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0304 	and.w	r3, r3, #4
 8001430:	2b00      	cmp	r3, #0
 8001432:	f000 80a0 	beq.w	8001576 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001436:	2300      	movs	r3, #0
 8001438:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800143a:	4b13      	ldr	r3, [pc, #76]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d10f      	bne.n	8001466 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	4a0e      	ldr	r2, [pc, #56]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 8001450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001454:	6413      	str	r3, [r2, #64]	; 0x40
 8001456:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001462:	2301      	movs	r3, #1
 8001464:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001466:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <HAL_RCC_OscConfig+0x2b8>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800146e:	2b00      	cmp	r3, #0
 8001470:	d121      	bne.n	80014b6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001472:	4b08      	ldr	r3, [pc, #32]	; (8001494 <HAL_RCC_OscConfig+0x2b8>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a07      	ldr	r2, [pc, #28]	; (8001494 <HAL_RCC_OscConfig+0x2b8>)
 8001478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800147c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800147e:	f7ff fbe5 	bl	8000c4c <HAL_GetTick>
 8001482:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001484:	e011      	b.n	80014aa <HAL_RCC_OscConfig+0x2ce>
 8001486:	bf00      	nop
 8001488:	40023800 	.word	0x40023800
 800148c:	42470000 	.word	0x42470000
 8001490:	42470e80 	.word	0x42470e80
 8001494:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001498:	f7ff fbd8 	bl	8000c4c <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e0fd      	b.n	80016a6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014aa:	4b81      	ldr	r3, [pc, #516]	; (80016b0 <HAL_RCC_OscConfig+0x4d4>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d0f0      	beq.n	8001498 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d106      	bne.n	80014cc <HAL_RCC_OscConfig+0x2f0>
 80014be:	4b7d      	ldr	r3, [pc, #500]	; (80016b4 <HAL_RCC_OscConfig+0x4d8>)
 80014c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c2:	4a7c      	ldr	r2, [pc, #496]	; (80016b4 <HAL_RCC_OscConfig+0x4d8>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	6713      	str	r3, [r2, #112]	; 0x70
 80014ca:	e01c      	b.n	8001506 <HAL_RCC_OscConfig+0x32a>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	2b05      	cmp	r3, #5
 80014d2:	d10c      	bne.n	80014ee <HAL_RCC_OscConfig+0x312>
 80014d4:	4b77      	ldr	r3, [pc, #476]	; (80016b4 <HAL_RCC_OscConfig+0x4d8>)
 80014d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d8:	4a76      	ldr	r2, [pc, #472]	; (80016b4 <HAL_RCC_OscConfig+0x4d8>)
 80014da:	f043 0304 	orr.w	r3, r3, #4
 80014de:	6713      	str	r3, [r2, #112]	; 0x70
 80014e0:	4b74      	ldr	r3, [pc, #464]	; (80016b4 <HAL_RCC_OscConfig+0x4d8>)
 80014e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e4:	4a73      	ldr	r2, [pc, #460]	; (80016b4 <HAL_RCC_OscConfig+0x4d8>)
 80014e6:	f043 0301 	orr.w	r3, r3, #1
 80014ea:	6713      	str	r3, [r2, #112]	; 0x70
 80014ec:	e00b      	b.n	8001506 <HAL_RCC_OscConfig+0x32a>
 80014ee:	4b71      	ldr	r3, [pc, #452]	; (80016b4 <HAL_RCC_OscConfig+0x4d8>)
 80014f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f2:	4a70      	ldr	r2, [pc, #448]	; (80016b4 <HAL_RCC_OscConfig+0x4d8>)
 80014f4:	f023 0301 	bic.w	r3, r3, #1
 80014f8:	6713      	str	r3, [r2, #112]	; 0x70
 80014fa:	4b6e      	ldr	r3, [pc, #440]	; (80016b4 <HAL_RCC_OscConfig+0x4d8>)
 80014fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014fe:	4a6d      	ldr	r2, [pc, #436]	; (80016b4 <HAL_RCC_OscConfig+0x4d8>)
 8001500:	f023 0304 	bic.w	r3, r3, #4
 8001504:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d015      	beq.n	800153a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800150e:	f7ff fb9d 	bl	8000c4c <HAL_GetTick>
 8001512:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001514:	e00a      	b.n	800152c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001516:	f7ff fb99 	bl	8000c4c <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	f241 3288 	movw	r2, #5000	; 0x1388
 8001524:	4293      	cmp	r3, r2
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e0bc      	b.n	80016a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800152c:	4b61      	ldr	r3, [pc, #388]	; (80016b4 <HAL_RCC_OscConfig+0x4d8>)
 800152e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001530:	f003 0302 	and.w	r3, r3, #2
 8001534:	2b00      	cmp	r3, #0
 8001536:	d0ee      	beq.n	8001516 <HAL_RCC_OscConfig+0x33a>
 8001538:	e014      	b.n	8001564 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800153a:	f7ff fb87 	bl	8000c4c <HAL_GetTick>
 800153e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001540:	e00a      	b.n	8001558 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001542:	f7ff fb83 	bl	8000c4c <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001550:	4293      	cmp	r3, r2
 8001552:	d901      	bls.n	8001558 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e0a6      	b.n	80016a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001558:	4b56      	ldr	r3, [pc, #344]	; (80016b4 <HAL_RCC_OscConfig+0x4d8>)
 800155a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	2b00      	cmp	r3, #0
 8001562:	d1ee      	bne.n	8001542 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001564:	7dfb      	ldrb	r3, [r7, #23]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d105      	bne.n	8001576 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800156a:	4b52      	ldr	r3, [pc, #328]	; (80016b4 <HAL_RCC_OscConfig+0x4d8>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	4a51      	ldr	r2, [pc, #324]	; (80016b4 <HAL_RCC_OscConfig+0x4d8>)
 8001570:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001574:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	699b      	ldr	r3, [r3, #24]
 800157a:	2b00      	cmp	r3, #0
 800157c:	f000 8092 	beq.w	80016a4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001580:	4b4c      	ldr	r3, [pc, #304]	; (80016b4 <HAL_RCC_OscConfig+0x4d8>)
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	f003 030c 	and.w	r3, r3, #12
 8001588:	2b08      	cmp	r3, #8
 800158a:	d05c      	beq.n	8001646 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	2b02      	cmp	r3, #2
 8001592:	d141      	bne.n	8001618 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001594:	4b48      	ldr	r3, [pc, #288]	; (80016b8 <HAL_RCC_OscConfig+0x4dc>)
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159a:	f7ff fb57 	bl	8000c4c <HAL_GetTick>
 800159e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015a0:	e008      	b.n	80015b4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015a2:	f7ff fb53 	bl	8000c4c <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e078      	b.n	80016a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015b4:	4b3f      	ldr	r3, [pc, #252]	; (80016b4 <HAL_RCC_OscConfig+0x4d8>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1f0      	bne.n	80015a2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	69da      	ldr	r2, [r3, #28]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a1b      	ldr	r3, [r3, #32]
 80015c8:	431a      	orrs	r2, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ce:	019b      	lsls	r3, r3, #6
 80015d0:	431a      	orrs	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d6:	085b      	lsrs	r3, r3, #1
 80015d8:	3b01      	subs	r3, #1
 80015da:	041b      	lsls	r3, r3, #16
 80015dc:	431a      	orrs	r2, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e2:	061b      	lsls	r3, r3, #24
 80015e4:	4933      	ldr	r1, [pc, #204]	; (80016b4 <HAL_RCC_OscConfig+0x4d8>)
 80015e6:	4313      	orrs	r3, r2
 80015e8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015ea:	4b33      	ldr	r3, [pc, #204]	; (80016b8 <HAL_RCC_OscConfig+0x4dc>)
 80015ec:	2201      	movs	r2, #1
 80015ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f0:	f7ff fb2c 	bl	8000c4c <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015f8:	f7ff fb28 	bl	8000c4c <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e04d      	b.n	80016a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800160a:	4b2a      	ldr	r3, [pc, #168]	; (80016b4 <HAL_RCC_OscConfig+0x4d8>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d0f0      	beq.n	80015f8 <HAL_RCC_OscConfig+0x41c>
 8001616:	e045      	b.n	80016a4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001618:	4b27      	ldr	r3, [pc, #156]	; (80016b8 <HAL_RCC_OscConfig+0x4dc>)
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161e:	f7ff fb15 	bl	8000c4c <HAL_GetTick>
 8001622:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001624:	e008      	b.n	8001638 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001626:	f7ff fb11 	bl	8000c4c <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d901      	bls.n	8001638 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e036      	b.n	80016a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001638:	4b1e      	ldr	r3, [pc, #120]	; (80016b4 <HAL_RCC_OscConfig+0x4d8>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d1f0      	bne.n	8001626 <HAL_RCC_OscConfig+0x44a>
 8001644:	e02e      	b.n	80016a4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	699b      	ldr	r3, [r3, #24]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d101      	bne.n	8001652 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e029      	b.n	80016a6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001652:	4b18      	ldr	r3, [pc, #96]	; (80016b4 <HAL_RCC_OscConfig+0x4d8>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	69db      	ldr	r3, [r3, #28]
 8001662:	429a      	cmp	r2, r3
 8001664:	d11c      	bne.n	80016a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001670:	429a      	cmp	r2, r3
 8001672:	d115      	bne.n	80016a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001674:	68fa      	ldr	r2, [r7, #12]
 8001676:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800167a:	4013      	ands	r3, r2
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001680:	4293      	cmp	r3, r2
 8001682:	d10d      	bne.n	80016a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800168e:	429a      	cmp	r2, r3
 8001690:	d106      	bne.n	80016a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800169c:	429a      	cmp	r2, r3
 800169e:	d001      	beq.n	80016a4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e000      	b.n	80016a6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3718      	adds	r7, #24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40007000 	.word	0x40007000
 80016b4:	40023800 	.word	0x40023800
 80016b8:	42470060 	.word	0x42470060

080016bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d101      	bne.n	80016d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e0cc      	b.n	800186a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016d0:	4b68      	ldr	r3, [pc, #416]	; (8001874 <HAL_RCC_ClockConfig+0x1b8>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 030f 	and.w	r3, r3, #15
 80016d8:	683a      	ldr	r2, [r7, #0]
 80016da:	429a      	cmp	r2, r3
 80016dc:	d90c      	bls.n	80016f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016de:	4b65      	ldr	r3, [pc, #404]	; (8001874 <HAL_RCC_ClockConfig+0x1b8>)
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	b2d2      	uxtb	r2, r2
 80016e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016e6:	4b63      	ldr	r3, [pc, #396]	; (8001874 <HAL_RCC_ClockConfig+0x1b8>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 030f 	and.w	r3, r3, #15
 80016ee:	683a      	ldr	r2, [r7, #0]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d001      	beq.n	80016f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e0b8      	b.n	800186a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	2b00      	cmp	r3, #0
 8001702:	d020      	beq.n	8001746 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0304 	and.w	r3, r3, #4
 800170c:	2b00      	cmp	r3, #0
 800170e:	d005      	beq.n	800171c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001710:	4b59      	ldr	r3, [pc, #356]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	4a58      	ldr	r2, [pc, #352]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 8001716:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800171a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0308 	and.w	r3, r3, #8
 8001724:	2b00      	cmp	r3, #0
 8001726:	d005      	beq.n	8001734 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001728:	4b53      	ldr	r3, [pc, #332]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	4a52      	ldr	r2, [pc, #328]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 800172e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001732:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001734:	4b50      	ldr	r3, [pc, #320]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	494d      	ldr	r1, [pc, #308]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 8001742:	4313      	orrs	r3, r2
 8001744:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	2b00      	cmp	r3, #0
 8001750:	d044      	beq.n	80017dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d107      	bne.n	800176a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800175a:	4b47      	ldr	r3, [pc, #284]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d119      	bne.n	800179a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e07f      	b.n	800186a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	2b02      	cmp	r3, #2
 8001770:	d003      	beq.n	800177a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001776:	2b03      	cmp	r3, #3
 8001778:	d107      	bne.n	800178a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800177a:	4b3f      	ldr	r3, [pc, #252]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d109      	bne.n	800179a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e06f      	b.n	800186a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800178a:	4b3b      	ldr	r3, [pc, #236]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d101      	bne.n	800179a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e067      	b.n	800186a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800179a:	4b37      	ldr	r3, [pc, #220]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f023 0203 	bic.w	r2, r3, #3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	4934      	ldr	r1, [pc, #208]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 80017a8:	4313      	orrs	r3, r2
 80017aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017ac:	f7ff fa4e 	bl	8000c4c <HAL_GetTick>
 80017b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017b2:	e00a      	b.n	80017ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017b4:	f7ff fa4a 	bl	8000c4c <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	f241 3288 	movw	r2, #5000	; 0x1388
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e04f      	b.n	800186a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ca:	4b2b      	ldr	r3, [pc, #172]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f003 020c 	and.w	r2, r3, #12
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	429a      	cmp	r2, r3
 80017da:	d1eb      	bne.n	80017b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017dc:	4b25      	ldr	r3, [pc, #148]	; (8001874 <HAL_RCC_ClockConfig+0x1b8>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 030f 	and.w	r3, r3, #15
 80017e4:	683a      	ldr	r2, [r7, #0]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d20c      	bcs.n	8001804 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ea:	4b22      	ldr	r3, [pc, #136]	; (8001874 <HAL_RCC_ClockConfig+0x1b8>)
 80017ec:	683a      	ldr	r2, [r7, #0]
 80017ee:	b2d2      	uxtb	r2, r2
 80017f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017f2:	4b20      	ldr	r3, [pc, #128]	; (8001874 <HAL_RCC_ClockConfig+0x1b8>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 030f 	and.w	r3, r3, #15
 80017fa:	683a      	ldr	r2, [r7, #0]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d001      	beq.n	8001804 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e032      	b.n	800186a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0304 	and.w	r3, r3, #4
 800180c:	2b00      	cmp	r3, #0
 800180e:	d008      	beq.n	8001822 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001810:	4b19      	ldr	r3, [pc, #100]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	4916      	ldr	r1, [pc, #88]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 800181e:	4313      	orrs	r3, r2
 8001820:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0308 	and.w	r3, r3, #8
 800182a:	2b00      	cmp	r3, #0
 800182c:	d009      	beq.n	8001842 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800182e:	4b12      	ldr	r3, [pc, #72]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	490e      	ldr	r1, [pc, #56]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 800183e:	4313      	orrs	r3, r2
 8001840:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001842:	f000 f821 	bl	8001888 <HAL_RCC_GetSysClockFreq>
 8001846:	4601      	mov	r1, r0
 8001848:	4b0b      	ldr	r3, [pc, #44]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	091b      	lsrs	r3, r3, #4
 800184e:	f003 030f 	and.w	r3, r3, #15
 8001852:	4a0a      	ldr	r2, [pc, #40]	; (800187c <HAL_RCC_ClockConfig+0x1c0>)
 8001854:	5cd3      	ldrb	r3, [r2, r3]
 8001856:	fa21 f303 	lsr.w	r3, r1, r3
 800185a:	4a09      	ldr	r2, [pc, #36]	; (8001880 <HAL_RCC_ClockConfig+0x1c4>)
 800185c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800185e:	4b09      	ldr	r3, [pc, #36]	; (8001884 <HAL_RCC_ClockConfig+0x1c8>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff f9ae 	bl	8000bc4 <HAL_InitTick>

  return HAL_OK;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40023c00 	.word	0x40023c00
 8001878:	40023800 	.word	0x40023800
 800187c:	080047a4 	.word	0x080047a4
 8001880:	20000064 	.word	0x20000064
 8001884:	20000068 	.word	0x20000068

08001888 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800188e:	2300      	movs	r3, #0
 8001890:	607b      	str	r3, [r7, #4]
 8001892:	2300      	movs	r3, #0
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	2300      	movs	r3, #0
 8001898:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800189a:	2300      	movs	r3, #0
 800189c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800189e:	4b63      	ldr	r3, [pc, #396]	; (8001a2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f003 030c 	and.w	r3, r3, #12
 80018a6:	2b04      	cmp	r3, #4
 80018a8:	d007      	beq.n	80018ba <HAL_RCC_GetSysClockFreq+0x32>
 80018aa:	2b08      	cmp	r3, #8
 80018ac:	d008      	beq.n	80018c0 <HAL_RCC_GetSysClockFreq+0x38>
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f040 80b4 	bne.w	8001a1c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018b4:	4b5e      	ldr	r3, [pc, #376]	; (8001a30 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80018b6:	60bb      	str	r3, [r7, #8]
       break;
 80018b8:	e0b3      	b.n	8001a22 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018ba:	4b5e      	ldr	r3, [pc, #376]	; (8001a34 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80018bc:	60bb      	str	r3, [r7, #8]
      break;
 80018be:	e0b0      	b.n	8001a22 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018c0:	4b5a      	ldr	r3, [pc, #360]	; (8001a2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018c8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018ca:	4b58      	ldr	r3, [pc, #352]	; (8001a2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d04a      	beq.n	800196c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018d6:	4b55      	ldr	r3, [pc, #340]	; (8001a2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	099b      	lsrs	r3, r3, #6
 80018dc:	f04f 0400 	mov.w	r4, #0
 80018e0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80018e4:	f04f 0200 	mov.w	r2, #0
 80018e8:	ea03 0501 	and.w	r5, r3, r1
 80018ec:	ea04 0602 	and.w	r6, r4, r2
 80018f0:	4629      	mov	r1, r5
 80018f2:	4632      	mov	r2, r6
 80018f4:	f04f 0300 	mov.w	r3, #0
 80018f8:	f04f 0400 	mov.w	r4, #0
 80018fc:	0154      	lsls	r4, r2, #5
 80018fe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001902:	014b      	lsls	r3, r1, #5
 8001904:	4619      	mov	r1, r3
 8001906:	4622      	mov	r2, r4
 8001908:	1b49      	subs	r1, r1, r5
 800190a:	eb62 0206 	sbc.w	r2, r2, r6
 800190e:	f04f 0300 	mov.w	r3, #0
 8001912:	f04f 0400 	mov.w	r4, #0
 8001916:	0194      	lsls	r4, r2, #6
 8001918:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800191c:	018b      	lsls	r3, r1, #6
 800191e:	1a5b      	subs	r3, r3, r1
 8001920:	eb64 0402 	sbc.w	r4, r4, r2
 8001924:	f04f 0100 	mov.w	r1, #0
 8001928:	f04f 0200 	mov.w	r2, #0
 800192c:	00e2      	lsls	r2, r4, #3
 800192e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001932:	00d9      	lsls	r1, r3, #3
 8001934:	460b      	mov	r3, r1
 8001936:	4614      	mov	r4, r2
 8001938:	195b      	adds	r3, r3, r5
 800193a:	eb44 0406 	adc.w	r4, r4, r6
 800193e:	f04f 0100 	mov.w	r1, #0
 8001942:	f04f 0200 	mov.w	r2, #0
 8001946:	0262      	lsls	r2, r4, #9
 8001948:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800194c:	0259      	lsls	r1, r3, #9
 800194e:	460b      	mov	r3, r1
 8001950:	4614      	mov	r4, r2
 8001952:	4618      	mov	r0, r3
 8001954:	4621      	mov	r1, r4
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f04f 0400 	mov.w	r4, #0
 800195c:	461a      	mov	r2, r3
 800195e:	4623      	mov	r3, r4
 8001960:	f7fe fc32 	bl	80001c8 <__aeabi_uldivmod>
 8001964:	4603      	mov	r3, r0
 8001966:	460c      	mov	r4, r1
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	e049      	b.n	8001a00 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800196c:	4b2f      	ldr	r3, [pc, #188]	; (8001a2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	099b      	lsrs	r3, r3, #6
 8001972:	f04f 0400 	mov.w	r4, #0
 8001976:	f240 11ff 	movw	r1, #511	; 0x1ff
 800197a:	f04f 0200 	mov.w	r2, #0
 800197e:	ea03 0501 	and.w	r5, r3, r1
 8001982:	ea04 0602 	and.w	r6, r4, r2
 8001986:	4629      	mov	r1, r5
 8001988:	4632      	mov	r2, r6
 800198a:	f04f 0300 	mov.w	r3, #0
 800198e:	f04f 0400 	mov.w	r4, #0
 8001992:	0154      	lsls	r4, r2, #5
 8001994:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001998:	014b      	lsls	r3, r1, #5
 800199a:	4619      	mov	r1, r3
 800199c:	4622      	mov	r2, r4
 800199e:	1b49      	subs	r1, r1, r5
 80019a0:	eb62 0206 	sbc.w	r2, r2, r6
 80019a4:	f04f 0300 	mov.w	r3, #0
 80019a8:	f04f 0400 	mov.w	r4, #0
 80019ac:	0194      	lsls	r4, r2, #6
 80019ae:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80019b2:	018b      	lsls	r3, r1, #6
 80019b4:	1a5b      	subs	r3, r3, r1
 80019b6:	eb64 0402 	sbc.w	r4, r4, r2
 80019ba:	f04f 0100 	mov.w	r1, #0
 80019be:	f04f 0200 	mov.w	r2, #0
 80019c2:	00e2      	lsls	r2, r4, #3
 80019c4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80019c8:	00d9      	lsls	r1, r3, #3
 80019ca:	460b      	mov	r3, r1
 80019cc:	4614      	mov	r4, r2
 80019ce:	195b      	adds	r3, r3, r5
 80019d0:	eb44 0406 	adc.w	r4, r4, r6
 80019d4:	f04f 0100 	mov.w	r1, #0
 80019d8:	f04f 0200 	mov.w	r2, #0
 80019dc:	02a2      	lsls	r2, r4, #10
 80019de:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80019e2:	0299      	lsls	r1, r3, #10
 80019e4:	460b      	mov	r3, r1
 80019e6:	4614      	mov	r4, r2
 80019e8:	4618      	mov	r0, r3
 80019ea:	4621      	mov	r1, r4
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f04f 0400 	mov.w	r4, #0
 80019f2:	461a      	mov	r2, r3
 80019f4:	4623      	mov	r3, r4
 80019f6:	f7fe fbe7 	bl	80001c8 <__aeabi_uldivmod>
 80019fa:	4603      	mov	r3, r0
 80019fc:	460c      	mov	r4, r1
 80019fe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a00:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	0c1b      	lsrs	r3, r3, #16
 8001a06:	f003 0303 	and.w	r3, r3, #3
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001a10:	68fa      	ldr	r2, [r7, #12]
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a18:	60bb      	str	r3, [r7, #8]
      break;
 8001a1a:	e002      	b.n	8001a22 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a1c:	4b04      	ldr	r3, [pc, #16]	; (8001a30 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001a1e:	60bb      	str	r3, [r7, #8]
      break;
 8001a20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a22:	68bb      	ldr	r3, [r7, #8]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3714      	adds	r7, #20
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	00f42400 	.word	0x00f42400
 8001a34:	007a1200 	.word	0x007a1200

08001a38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e056      	b.n	8001af8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d106      	bne.n	8001a6a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f7fe ffd9 	bl	8000a1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2202      	movs	r2, #2
 8001a6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a80:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685a      	ldr	r2, [r3, #4]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	431a      	orrs	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	431a      	orrs	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	431a      	orrs	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	695b      	ldr	r3, [r3, #20]
 8001a9c:	431a      	orrs	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001aa6:	431a      	orrs	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	69db      	ldr	r3, [r3, #28]
 8001aac:	431a      	orrs	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a1b      	ldr	r3, [r3, #32]
 8001ab2:	ea42 0103 	orr.w	r1, r2, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	0c1b      	lsrs	r3, r3, #16
 8001ac8:	f003 0104 	and.w	r1, r3, #4
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	69da      	ldr	r2, [r3, #28]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ae6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2201      	movs	r2, #1
 8001af2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b08c      	sub	sp, #48	; 0x30
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
 8001b0c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001b12:	2300      	movs	r3, #0
 8001b14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d101      	bne.n	8001b26 <HAL_SPI_TransmitReceive+0x26>
 8001b22:	2302      	movs	r3, #2
 8001b24:	e18a      	b.n	8001e3c <HAL_SPI_TransmitReceive+0x33c>
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001b2e:	f7ff f88d 	bl	8000c4c <HAL_GetTick>
 8001b32:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001b44:	887b      	ldrh	r3, [r7, #2]
 8001b46:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001b48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d00f      	beq.n	8001b70 <HAL_SPI_TransmitReceive+0x70>
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001b56:	d107      	bne.n	8001b68 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d103      	bne.n	8001b68 <HAL_SPI_TransmitReceive+0x68>
 8001b60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001b64:	2b04      	cmp	r3, #4
 8001b66:	d003      	beq.n	8001b70 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001b6e:	e15b      	b.n	8001e28 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d005      	beq.n	8001b82 <HAL_SPI_TransmitReceive+0x82>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d002      	beq.n	8001b82 <HAL_SPI_TransmitReceive+0x82>
 8001b7c:	887b      	ldrh	r3, [r7, #2]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d103      	bne.n	8001b8a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001b88:	e14e      	b.n	8001e28 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b04      	cmp	r3, #4
 8001b94:	d003      	beq.n	8001b9e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2205      	movs	r2, #5
 8001b9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	887a      	ldrh	r2, [r7, #2]
 8001bae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	887a      	ldrh	r2, [r7, #2]
 8001bb4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	68ba      	ldr	r2, [r7, #8]
 8001bba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	887a      	ldrh	r2, [r7, #2]
 8001bc0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	887a      	ldrh	r2, [r7, #2]
 8001bc6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bde:	2b40      	cmp	r3, #64	; 0x40
 8001be0:	d007      	beq.n	8001bf2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bf0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001bfa:	d178      	bne.n	8001cee <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d002      	beq.n	8001c0a <HAL_SPI_TransmitReceive+0x10a>
 8001c04:	8b7b      	ldrh	r3, [r7, #26]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d166      	bne.n	8001cd8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	881a      	ldrh	r2, [r3, #0]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	1c9a      	adds	r2, r3, #2
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	3b01      	subs	r3, #1
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001c2e:	e053      	b.n	8001cd8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d11b      	bne.n	8001c76 <HAL_SPI_TransmitReceive+0x176>
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d016      	beq.n	8001c76 <HAL_SPI_TransmitReceive+0x176>
 8001c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d113      	bne.n	8001c76 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	881a      	ldrh	r2, [r3, #0]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	1c9a      	adds	r2, r3, #2
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001c72:	2300      	movs	r3, #0
 8001c74:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f003 0301 	and.w	r3, r3, #1
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d119      	bne.n	8001cb8 <HAL_SPI_TransmitReceive+0x1b8>
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d014      	beq.n	8001cb8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68da      	ldr	r2, [r3, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c98:	b292      	uxth	r2, r2
 8001c9a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ca0:	1c9a      	adds	r2, r3, #2
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	3b01      	subs	r3, #1
 8001cae:	b29a      	uxth	r2, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001cb8:	f7fe ffc8 	bl	8000c4c <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d807      	bhi.n	8001cd8 <HAL_SPI_TransmitReceive+0x1d8>
 8001cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cce:	d003      	beq.n	8001cd8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001cd6:	e0a7      	b.n	8001e28 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1a6      	bne.n	8001c30 <HAL_SPI_TransmitReceive+0x130>
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1a1      	bne.n	8001c30 <HAL_SPI_TransmitReceive+0x130>
 8001cec:	e07c      	b.n	8001de8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d002      	beq.n	8001cfc <HAL_SPI_TransmitReceive+0x1fc>
 8001cf6:	8b7b      	ldrh	r3, [r7, #26]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d16b      	bne.n	8001dd4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	330c      	adds	r3, #12
 8001d06:	7812      	ldrb	r2, [r2, #0]
 8001d08:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	1c5a      	adds	r2, r3, #1
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001d22:	e057      	b.n	8001dd4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d11c      	bne.n	8001d6c <HAL_SPI_TransmitReceive+0x26c>
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d017      	beq.n	8001d6c <HAL_SPI_TransmitReceive+0x26c>
 8001d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d114      	bne.n	8001d6c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	330c      	adds	r3, #12
 8001d4c:	7812      	ldrb	r2, [r2, #0]
 8001d4e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d54:	1c5a      	adds	r2, r3, #1
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	3b01      	subs	r3, #1
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d119      	bne.n	8001dae <HAL_SPI_TransmitReceive+0x2ae>
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d014      	beq.n	8001dae <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68da      	ldr	r2, [r3, #12]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d8e:	b2d2      	uxtb	r2, r2
 8001d90:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d96:	1c5a      	adds	r2, r3, #1
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	3b01      	subs	r3, #1
 8001da4:	b29a      	uxth	r2, r3
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001daa:	2301      	movs	r3, #1
 8001dac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001dae:	f7fe ff4d 	bl	8000c4c <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d803      	bhi.n	8001dc6 <HAL_SPI_TransmitReceive+0x2c6>
 8001dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dc4:	d102      	bne.n	8001dcc <HAL_SPI_TransmitReceive+0x2cc>
 8001dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d103      	bne.n	8001dd4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001dd2:	e029      	b.n	8001e28 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1a2      	bne.n	8001d24 <HAL_SPI_TransmitReceive+0x224>
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d19d      	bne.n	8001d24 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001dec:	68f8      	ldr	r0, [r7, #12]
 8001dee:	f000 f893 	bl	8001f18 <SPI_EndRxTxTransaction>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d006      	beq.n	8001e06 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2220      	movs	r2, #32
 8001e02:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001e04:	e010      	b.n	8001e28 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d10b      	bne.n	8001e26 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001e0e:	2300      	movs	r3, #0
 8001e10:	617b      	str	r3, [r7, #20]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	617b      	str	r3, [r7, #20]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	617b      	str	r3, [r7, #20]
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	e000      	b.n	8001e28 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8001e26:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001e38:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3730      	adds	r7, #48	; 0x30
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	603b      	str	r3, [r7, #0]
 8001e50:	4613      	mov	r3, r2
 8001e52:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e54:	e04c      	b.n	8001ef0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e5c:	d048      	beq.n	8001ef0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001e5e:	f7fe fef5 	bl	8000c4c <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d902      	bls.n	8001e74 <SPI_WaitFlagStateUntilTimeout+0x30>
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d13d      	bne.n	8001ef0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	685a      	ldr	r2, [r3, #4]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001e82:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e8c:	d111      	bne.n	8001eb2 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e96:	d004      	beq.n	8001ea2 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ea0:	d107      	bne.n	8001eb2 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001eb0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001eba:	d10f      	bne.n	8001edc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001eda:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e00f      	b.n	8001f10 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	689a      	ldr	r2, [r3, #8]
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	68ba      	ldr	r2, [r7, #8]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	bf0c      	ite	eq
 8001f00:	2301      	moveq	r3, #1
 8001f02:	2300      	movne	r3, #0
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	461a      	mov	r2, r3
 8001f08:	79fb      	ldrb	r3, [r7, #7]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d1a3      	bne.n	8001e56 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3710      	adds	r7, #16
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b088      	sub	sp, #32
 8001f1c:	af02      	add	r7, sp, #8
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001f24:	4b1b      	ldr	r3, [pc, #108]	; (8001f94 <SPI_EndRxTxTransaction+0x7c>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a1b      	ldr	r2, [pc, #108]	; (8001f98 <SPI_EndRxTxTransaction+0x80>)
 8001f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2e:	0d5b      	lsrs	r3, r3, #21
 8001f30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f34:	fb02 f303 	mul.w	r3, r2, r3
 8001f38:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f42:	d112      	bne.n	8001f6a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	9300      	str	r3, [sp, #0]
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	2180      	movs	r1, #128	; 0x80
 8001f4e:	68f8      	ldr	r0, [r7, #12]
 8001f50:	f7ff ff78 	bl	8001e44 <SPI_WaitFlagStateUntilTimeout>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d016      	beq.n	8001f88 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f5e:	f043 0220 	orr.w	r2, r3, #32
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e00f      	b.n	8001f8a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d00a      	beq.n	8001f86 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	3b01      	subs	r3, #1
 8001f74:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f80:	2b80      	cmp	r3, #128	; 0x80
 8001f82:	d0f2      	beq.n	8001f6a <SPI_EndRxTxTransaction+0x52>
 8001f84:	e000      	b.n	8001f88 <SPI_EndRxTxTransaction+0x70>
        break;
 8001f86:	bf00      	nop
  }

  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3718      	adds	r7, #24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20000064 	.word	0x20000064
 8001f98:	165e9f81 	.word	0x165e9f81

08001f9c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8001fa0:	4904      	ldr	r1, [pc, #16]	; (8001fb4 <MX_FATFS_Init+0x18>)
 8001fa2:	4805      	ldr	r0, [pc, #20]	; (8001fb8 <MX_FATFS_Init+0x1c>)
 8001fa4:	f002 fb90 	bl	80046c8 <FATFS_LinkDriver>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	461a      	mov	r2, r3
 8001fac:	4b03      	ldr	r3, [pc, #12]	; (8001fbc <MX_FATFS_Init+0x20>)
 8001fae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8001fb0:	bf00      	nop
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20000798 	.word	0x20000798
 8001fb8:	20000070 	.word	0x20000070
 8001fbc:	2000079c 	.word	0x2000079c

08001fc0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8001fc4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	if(pdrv)
 8001fda:	79fb      	ldrb	r3, [r7, #7]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <USER_initialize+0x14>
		return STA_NOINIT;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e007      	b.n	8001ff4 <USER_initialize+0x24>
	else
		return (SPIFLASH_disk_initialize() ? STA_NOINIT : 0);
 8001fe4:	f7fe fbc4 	bl	8000770 <SPIFLASH_disk_initialize>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	bf14      	ite	ne
 8001fee:	2301      	movne	r3, #1
 8001ff0:	2300      	moveq	r3, #0
 8001ff2:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return 0;
 8002006:	2300      	movs	r3, #0
  /* USER CODE END STATUS */
}
 8002008:	4618      	mov	r0, r3
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	60b9      	str	r1, [r7, #8]
 800201c:	607a      	str	r2, [r7, #4]
 800201e:	603b      	str	r3, [r7, #0]
 8002020:	4603      	mov	r3, r0
 8002022:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	int i;
	for(i=0;i<count;i++)
 8002024:	2300      	movs	r3, #0
 8002026:	617b      	str	r3, [r7, #20]
 8002028:	e00d      	b.n	8002046 <USER_read+0x32>
	{
		W25X_Read_Sector(sector,buff);
 800202a:	68b9      	ldr	r1, [r7, #8]
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f7fe fc37 	bl	80008a0 <W25X_Read_Sector>
		sector ++;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	3301      	adds	r3, #1
 8002036:	607b      	str	r3, [r7, #4]
		buff += FLASH_SECTOR_SIZE;
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800203e:	60bb      	str	r3, [r7, #8]
	for(i=0;i<count;i++)
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	3301      	adds	r3, #1
 8002044:	617b      	str	r3, [r7, #20]
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	683a      	ldr	r2, [r7, #0]
 800204a:	429a      	cmp	r2, r3
 800204c:	d8ed      	bhi.n	800202a <USER_read+0x16>
	}

	return RES_OK;
 800204e:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8002050:	4618      	mov	r0, r3
 8002052:	3718      	adds	r7, #24
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	60b9      	str	r1, [r7, #8]
 8002060:	607a      	str	r2, [r7, #4]
 8002062:	603b      	str	r3, [r7, #0]
 8002064:	4603      	mov	r3, r0
 8002066:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	int i;
	for(i=0;i<count;i++)
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]
 800206c:	e010      	b.n	8002090 <USER_write+0x38>
	{	W25X_Erase_Sector(sector);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7fe fbe2 	bl	8000838 <W25X_Erase_Sector>

		W25X_Write_Sector(sector,(char*)buff);
 8002074:	68b9      	ldr	r1, [r7, #8]
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f7fe fc52 	bl	8000920 <W25X_Write_Sector>
		sector ++;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3301      	adds	r3, #1
 8002080:	607b      	str	r3, [r7, #4]
		buff += FLASH_SECTOR_SIZE;
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002088:	60bb      	str	r3, [r7, #8]
	for(i=0;i<count;i++)
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	3301      	adds	r3, #1
 800208e:	617b      	str	r3, [r7, #20]
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	683a      	ldr	r2, [r7, #0]
 8002094:	429a      	cmp	r2, r3
 8002096:	d8ea      	bhi.n	800206e <USER_write+0x16>
	}

	return RES_OK;
 8002098:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800209a:	4618      	mov	r0, r3
 800209c:	3718      	adds	r7, #24
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
	...

080020a4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	4603      	mov	r3, r0
 80020ac:	603a      	str	r2, [r7, #0]
 80020ae:	71fb      	strb	r3, [r7, #7]
 80020b0:	460b      	mov	r3, r1
 80020b2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	DRESULT res = RES_OK;
 80020b4:	2300      	movs	r3, #0
 80020b6:	73fb      	strb	r3, [r7, #15]

	switch(cmd)
 80020b8:	79bb      	ldrb	r3, [r7, #6]
 80020ba:	2b03      	cmp	r3, #3
 80020bc:	d819      	bhi.n	80020f2 <USER_ioctl+0x4e>
 80020be:	a201      	add	r2, pc, #4	; (adr r2, 80020c4 <USER_ioctl+0x20>)
 80020c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c4:	080020f3 	.word	0x080020f3
 80020c8:	080020e9 	.word	0x080020e9
 80020cc:	080020df 	.word	0x080020df
 80020d0:	080020d5 	.word	0x080020d5
	//				W25X_Erase_Sector(i);
	//
	//			break;

			case GET_BLOCK_SIZE:
				*(DWORD*)buff = FLASH_BLOCK_SIZE;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80020da:	601a      	str	r2, [r3, #0]
			//	buf[1] = (u8)(FLASH_BLOCK_SIZE & 0xFF);
			//	buf[0] = (u8)(FLASH_BLOCK_SIZE >> 8);
				break;
 80020dc:	e00a      	b.n	80020f4 <USER_ioctl+0x50>


			case GET_SECTOR_SIZE:
				*(DWORD*)buff = FLASH_SECTOR_SIZE;
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020e4:	601a      	str	r2, [r3, #0]
			//	buf[0] = (u8)(FLASH_SECTOR_SIZE & 0xFF);
			//	buf[1] = (u8)(FLASH_SECTOR_SIZE >> 8);
				break;
 80020e6:	e005      	b.n	80020f4 <USER_ioctl+0x50>

			case GET_SECTOR_COUNT:
				*(DWORD*)buff = FLASH_SECTOR_COUNT;
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020ee:	601a      	str	r2, [r3, #0]
			//	buf[0] = (u8)(FLASH_SECTOR_COUNT & 0xFF);
			//	buf[1] = (u8)(FLASH_SECTOR_COUNT >> 8);
				break;
 80020f0:	e000      	b.n	80020f4 <USER_ioctl+0x50>

			default:
				//res = RES_PARERR;
				break;
 80020f2:	bf00      	nop
		}
		return res;
 80020f4:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop

08002104 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800210e:	79fb      	ldrb	r3, [r7, #7]
 8002110:	4a08      	ldr	r2, [pc, #32]	; (8002134 <disk_status+0x30>)
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	4413      	add	r3, r2
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	79fa      	ldrb	r2, [r7, #7]
 800211c:	4905      	ldr	r1, [pc, #20]	; (8002134 <disk_status+0x30>)
 800211e:	440a      	add	r2, r1
 8002120:	7a12      	ldrb	r2, [r2, #8]
 8002122:	4610      	mov	r0, r2
 8002124:	4798      	blx	r3
 8002126:	4603      	mov	r3, r0
 8002128:	73fb      	strb	r3, [r7, #15]
  return stat;
 800212a:	7bfb      	ldrb	r3, [r7, #15]
}
 800212c:	4618      	mov	r0, r3
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	200000c8 	.word	0x200000c8

08002138 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	4603      	mov	r3, r0
 8002140:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8002142:	2300      	movs	r3, #0
 8002144:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8002146:	79fb      	ldrb	r3, [r7, #7]
 8002148:	4a0d      	ldr	r2, [pc, #52]	; (8002180 <disk_initialize+0x48>)
 800214a:	5cd3      	ldrb	r3, [r2, r3]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d111      	bne.n	8002174 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8002150:	79fb      	ldrb	r3, [r7, #7]
 8002152:	4a0b      	ldr	r2, [pc, #44]	; (8002180 <disk_initialize+0x48>)
 8002154:	2101      	movs	r1, #1
 8002156:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8002158:	79fb      	ldrb	r3, [r7, #7]
 800215a:	4a09      	ldr	r2, [pc, #36]	; (8002180 <disk_initialize+0x48>)
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	4413      	add	r3, r2
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	79fa      	ldrb	r2, [r7, #7]
 8002166:	4906      	ldr	r1, [pc, #24]	; (8002180 <disk_initialize+0x48>)
 8002168:	440a      	add	r2, r1
 800216a:	7a12      	ldrb	r2, [r2, #8]
 800216c:	4610      	mov	r0, r2
 800216e:	4798      	blx	r3
 8002170:	4603      	mov	r3, r0
 8002172:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8002174:	7bfb      	ldrb	r3, [r7, #15]
}
 8002176:	4618      	mov	r0, r3
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	200000c8 	.word	0x200000c8

08002184 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8002184:	b590      	push	{r4, r7, lr}
 8002186:	b087      	sub	sp, #28
 8002188:	af00      	add	r7, sp, #0
 800218a:	60b9      	str	r1, [r7, #8]
 800218c:	607a      	str	r2, [r7, #4]
 800218e:	603b      	str	r3, [r7, #0]
 8002190:	4603      	mov	r3, r0
 8002192:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8002194:	7bfb      	ldrb	r3, [r7, #15]
 8002196:	4a0a      	ldr	r2, [pc, #40]	; (80021c0 <disk_read+0x3c>)
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4413      	add	r3, r2
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	689c      	ldr	r4, [r3, #8]
 80021a0:	7bfb      	ldrb	r3, [r7, #15]
 80021a2:	4a07      	ldr	r2, [pc, #28]	; (80021c0 <disk_read+0x3c>)
 80021a4:	4413      	add	r3, r2
 80021a6:	7a18      	ldrb	r0, [r3, #8]
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	68b9      	ldr	r1, [r7, #8]
 80021ae:	47a0      	blx	r4
 80021b0:	4603      	mov	r3, r0
 80021b2:	75fb      	strb	r3, [r7, #23]
  return res;
 80021b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	371c      	adds	r7, #28
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd90      	pop	{r4, r7, pc}
 80021be:	bf00      	nop
 80021c0:	200000c8 	.word	0x200000c8

080021c4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80021c4:	b590      	push	{r4, r7, lr}
 80021c6:	b087      	sub	sp, #28
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60b9      	str	r1, [r7, #8]
 80021cc:	607a      	str	r2, [r7, #4]
 80021ce:	603b      	str	r3, [r7, #0]
 80021d0:	4603      	mov	r3, r0
 80021d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80021d4:	7bfb      	ldrb	r3, [r7, #15]
 80021d6:	4a0a      	ldr	r2, [pc, #40]	; (8002200 <disk_write+0x3c>)
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	4413      	add	r3, r2
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	68dc      	ldr	r4, [r3, #12]
 80021e0:	7bfb      	ldrb	r3, [r7, #15]
 80021e2:	4a07      	ldr	r2, [pc, #28]	; (8002200 <disk_write+0x3c>)
 80021e4:	4413      	add	r3, r2
 80021e6:	7a18      	ldrb	r0, [r3, #8]
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	68b9      	ldr	r1, [r7, #8]
 80021ee:	47a0      	blx	r4
 80021f0:	4603      	mov	r3, r0
 80021f2:	75fb      	strb	r3, [r7, #23]
  return res;
 80021f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	371c      	adds	r7, #28
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd90      	pop	{r4, r7, pc}
 80021fe:	bf00      	nop
 8002200:	200000c8 	.word	0x200000c8

08002204 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	603a      	str	r2, [r7, #0]
 800220e:	71fb      	strb	r3, [r7, #7]
 8002210:	460b      	mov	r3, r1
 8002212:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8002214:	79fb      	ldrb	r3, [r7, #7]
 8002216:	4a09      	ldr	r2, [pc, #36]	; (800223c <disk_ioctl+0x38>)
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	4413      	add	r3, r2
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	691b      	ldr	r3, [r3, #16]
 8002220:	79fa      	ldrb	r2, [r7, #7]
 8002222:	4906      	ldr	r1, [pc, #24]	; (800223c <disk_ioctl+0x38>)
 8002224:	440a      	add	r2, r1
 8002226:	7a10      	ldrb	r0, [r2, #8]
 8002228:	79b9      	ldrb	r1, [r7, #6]
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	4798      	blx	r3
 800222e:	4603      	mov	r3, r0
 8002230:	73fb      	strb	r3, [r7, #15]
  return res;
 8002232:	7bfb      	ldrb	r3, [r7, #15]
}
 8002234:	4618      	mov	r0, r3
 8002236:	3710      	adds	r7, #16
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	200000c8 	.word	0x200000c8

08002240 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3301      	adds	r3, #1
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8002250:	89fb      	ldrh	r3, [r7, #14]
 8002252:	021b      	lsls	r3, r3, #8
 8002254:	b21a      	sxth	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	b21b      	sxth	r3, r3
 800225c:	4313      	orrs	r3, r2
 800225e:	b21b      	sxth	r3, r3
 8002260:	81fb      	strh	r3, [r7, #14]
	return rv;
 8002262:	89fb      	ldrh	r3, [r7, #14]
}
 8002264:	4618      	mov	r0, r3
 8002266:	3714      	adds	r7, #20
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	3303      	adds	r3, #3
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	021b      	lsls	r3, r3, #8
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	3202      	adds	r2, #2
 8002288:	7812      	ldrb	r2, [r2, #0]
 800228a:	4313      	orrs	r3, r2
 800228c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	021b      	lsls	r3, r3, #8
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	3201      	adds	r2, #1
 8002296:	7812      	ldrb	r2, [r2, #0]
 8002298:	4313      	orrs	r3, r2
 800229a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	021b      	lsls	r3, r3, #8
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	7812      	ldrb	r2, [r2, #0]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	60fb      	str	r3, [r7, #12]
	return rv;
 80022a8:	68fb      	ldr	r3, [r7, #12]
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3714      	adds	r7, #20
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80022b6:	b480      	push	{r7}
 80022b8:	b083      	sub	sp, #12
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
 80022be:	460b      	mov	r3, r1
 80022c0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	1c5a      	adds	r2, r3, #1
 80022c6:	607a      	str	r2, [r7, #4]
 80022c8:	887a      	ldrh	r2, [r7, #2]
 80022ca:	b2d2      	uxtb	r2, r2
 80022cc:	701a      	strb	r2, [r3, #0]
 80022ce:	887b      	ldrh	r3, [r7, #2]
 80022d0:	0a1b      	lsrs	r3, r3, #8
 80022d2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	1c5a      	adds	r2, r3, #1
 80022d8:	607a      	str	r2, [r7, #4]
 80022da:	887a      	ldrh	r2, [r7, #2]
 80022dc:	b2d2      	uxtb	r2, r2
 80022de:	701a      	strb	r2, [r3, #0]
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	1c5a      	adds	r2, r3, #1
 80022fa:	607a      	str	r2, [r7, #4]
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	b2d2      	uxtb	r2, r2
 8002300:	701a      	strb	r2, [r3, #0]
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	0a1b      	lsrs	r3, r3, #8
 8002306:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	1c5a      	adds	r2, r3, #1
 800230c:	607a      	str	r2, [r7, #4]
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	b2d2      	uxtb	r2, r2
 8002312:	701a      	strb	r2, [r3, #0]
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	0a1b      	lsrs	r3, r3, #8
 8002318:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	1c5a      	adds	r2, r3, #1
 800231e:	607a      	str	r2, [r7, #4]
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	b2d2      	uxtb	r2, r2
 8002324:	701a      	strb	r2, [r3, #0]
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	0a1b      	lsrs	r3, r3, #8
 800232a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	1c5a      	adds	r2, r3, #1
 8002330:	607a      	str	r2, [r7, #4]
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	b2d2      	uxtb	r2, r2
 8002336:	701a      	strb	r2, [r3, #0]
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8002344:	b480      	push	{r7}
 8002346:	b087      	sub	sp, #28
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00d      	beq.n	800237a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	1c53      	adds	r3, r2, #1
 8002362:	613b      	str	r3, [r7, #16]
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	1c59      	adds	r1, r3, #1
 8002368:	6179      	str	r1, [r7, #20]
 800236a:	7812      	ldrb	r2, [r2, #0]
 800236c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	3b01      	subs	r3, #1
 8002372:	607b      	str	r3, [r7, #4]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1f1      	bne.n	800235e <mem_cpy+0x1a>
	}
}
 800237a:	bf00      	nop
 800237c:	371c      	adds	r7, #28
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8002386:	b480      	push	{r7}
 8002388:	b087      	sub	sp, #28
 800238a:	af00      	add	r7, sp, #0
 800238c:	60f8      	str	r0, [r7, #12]
 800238e:	60b9      	str	r1, [r7, #8]
 8002390:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	1c5a      	adds	r2, r3, #1
 800239a:	617a      	str	r2, [r7, #20]
 800239c:	68ba      	ldr	r2, [r7, #8]
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	3b01      	subs	r3, #1
 80023a6:	607b      	str	r3, [r7, #4]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1f3      	bne.n	8002396 <mem_set+0x10>
}
 80023ae:	bf00      	nop
 80023b0:	371c      	adds	r7, #28
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80023ba:	b480      	push	{r7}
 80023bc:	b089      	sub	sp, #36	; 0x24
 80023be:	af00      	add	r7, sp, #0
 80023c0:	60f8      	str	r0, [r7, #12]
 80023c2:	60b9      	str	r1, [r7, #8]
 80023c4:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	61fb      	str	r3, [r7, #28]
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80023ce:	2300      	movs	r3, #0
 80023d0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	1c5a      	adds	r2, r3, #1
 80023d6:	61fa      	str	r2, [r7, #28]
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	4619      	mov	r1, r3
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	1c5a      	adds	r2, r3, #1
 80023e0:	61ba      	str	r2, [r7, #24]
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	1acb      	subs	r3, r1, r3
 80023e6:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3b01      	subs	r3, #1
 80023ec:	607b      	str	r3, [r7, #4]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d002      	beq.n	80023fa <mem_cmp+0x40>
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d0eb      	beq.n	80023d2 <mem_cmp+0x18>

	return r;
 80023fa:	697b      	ldr	r3, [r7, #20]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3724      	adds	r7, #36	; 0x24
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8002412:	e002      	b.n	800241a <chk_chr+0x12>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3301      	adds	r3, #1
 8002418:	607b      	str	r3, [r7, #4]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d005      	beq.n	800242e <chk_chr+0x26>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	461a      	mov	r2, r3
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	4293      	cmp	r3, r2
 800242c:	d1f2      	bne.n	8002414 <chk_chr+0xc>
	return *str;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	781b      	ldrb	r3, [r3, #0]
}
 8002432:	4618      	mov	r0, r3
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
	...

08002440 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800244a:	2300      	movs	r3, #0
 800244c:	60bb      	str	r3, [r7, #8]
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	60fb      	str	r3, [r7, #12]
 8002452:	e029      	b.n	80024a8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8002454:	4a27      	ldr	r2, [pc, #156]	; (80024f4 <chk_lock+0xb4>)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	011b      	lsls	r3, r3, #4
 800245a:	4413      	add	r3, r2
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d01d      	beq.n	800249e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8002462:	4a24      	ldr	r2, [pc, #144]	; (80024f4 <chk_lock+0xb4>)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	011b      	lsls	r3, r3, #4
 8002468:	4413      	add	r3, r2
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	429a      	cmp	r2, r3
 8002472:	d116      	bne.n	80024a2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8002474:	4a1f      	ldr	r2, [pc, #124]	; (80024f4 <chk_lock+0xb4>)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	011b      	lsls	r3, r3, #4
 800247a:	4413      	add	r3, r2
 800247c:	3304      	adds	r3, #4
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8002484:	429a      	cmp	r2, r3
 8002486:	d10c      	bne.n	80024a2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8002488:	4a1a      	ldr	r2, [pc, #104]	; (80024f4 <chk_lock+0xb4>)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	011b      	lsls	r3, r3, #4
 800248e:	4413      	add	r3, r2
 8002490:	3308      	adds	r3, #8
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8002498:	429a      	cmp	r2, r3
 800249a:	d102      	bne.n	80024a2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800249c:	e007      	b.n	80024ae <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800249e:	2301      	movs	r3, #1
 80024a0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	3301      	adds	r3, #1
 80024a6:	60fb      	str	r3, [r7, #12]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d9d2      	bls.n	8002454 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d109      	bne.n	80024c8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d102      	bne.n	80024c0 <chk_lock+0x80>
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d101      	bne.n	80024c4 <chk_lock+0x84>
 80024c0:	2300      	movs	r3, #0
 80024c2:	e010      	b.n	80024e6 <chk_lock+0xa6>
 80024c4:	2312      	movs	r3, #18
 80024c6:	e00e      	b.n	80024e6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d108      	bne.n	80024e0 <chk_lock+0xa0>
 80024ce:	4a09      	ldr	r2, [pc, #36]	; (80024f4 <chk_lock+0xb4>)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	011b      	lsls	r3, r3, #4
 80024d4:	4413      	add	r3, r2
 80024d6:	330c      	adds	r3, #12
 80024d8:	881b      	ldrh	r3, [r3, #0]
 80024da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024de:	d101      	bne.n	80024e4 <chk_lock+0xa4>
 80024e0:	2310      	movs	r3, #16
 80024e2:	e000      	b.n	80024e6 <chk_lock+0xa6>
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3714      	adds	r7, #20
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	200000a8 	.word	0x200000a8

080024f8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80024fe:	2300      	movs	r3, #0
 8002500:	607b      	str	r3, [r7, #4]
 8002502:	e002      	b.n	800250a <enq_lock+0x12>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3301      	adds	r3, #1
 8002508:	607b      	str	r3, [r7, #4]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d806      	bhi.n	800251e <enq_lock+0x26>
 8002510:	4a09      	ldr	r2, [pc, #36]	; (8002538 <enq_lock+0x40>)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	011b      	lsls	r3, r3, #4
 8002516:	4413      	add	r3, r2
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1f2      	bne.n	8002504 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2b02      	cmp	r3, #2
 8002522:	bf14      	ite	ne
 8002524:	2301      	movne	r3, #1
 8002526:	2300      	moveq	r3, #0
 8002528:	b2db      	uxtb	r3, r3
}
 800252a:	4618      	mov	r0, r3
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	200000a8 	.word	0x200000a8

0800253c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8002546:	2300      	movs	r3, #0
 8002548:	60fb      	str	r3, [r7, #12]
 800254a:	e01f      	b.n	800258c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800254c:	4a41      	ldr	r2, [pc, #260]	; (8002654 <inc_lock+0x118>)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	011b      	lsls	r3, r3, #4
 8002552:	4413      	add	r3, r2
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	429a      	cmp	r2, r3
 800255c:	d113      	bne.n	8002586 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800255e:	4a3d      	ldr	r2, [pc, #244]	; (8002654 <inc_lock+0x118>)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	011b      	lsls	r3, r3, #4
 8002564:	4413      	add	r3, r2
 8002566:	3304      	adds	r3, #4
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800256e:	429a      	cmp	r2, r3
 8002570:	d109      	bne.n	8002586 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8002572:	4a38      	ldr	r2, [pc, #224]	; (8002654 <inc_lock+0x118>)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	011b      	lsls	r3, r3, #4
 8002578:	4413      	add	r3, r2
 800257a:	3308      	adds	r3, #8
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8002582:	429a      	cmp	r2, r3
 8002584:	d006      	beq.n	8002594 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	3301      	adds	r3, #1
 800258a:	60fb      	str	r3, [r7, #12]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d9dc      	bls.n	800254c <inc_lock+0x10>
 8002592:	e000      	b.n	8002596 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8002594:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2b02      	cmp	r3, #2
 800259a:	d132      	bne.n	8002602 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800259c:	2300      	movs	r3, #0
 800259e:	60fb      	str	r3, [r7, #12]
 80025a0:	e002      	b.n	80025a8 <inc_lock+0x6c>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	3301      	adds	r3, #1
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d806      	bhi.n	80025bc <inc_lock+0x80>
 80025ae:	4a29      	ldr	r2, [pc, #164]	; (8002654 <inc_lock+0x118>)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	011b      	lsls	r3, r3, #4
 80025b4:	4413      	add	r3, r2
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1f2      	bne.n	80025a2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d101      	bne.n	80025c6 <inc_lock+0x8a>
 80025c2:	2300      	movs	r3, #0
 80025c4:	e040      	b.n	8002648 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	4922      	ldr	r1, [pc, #136]	; (8002654 <inc_lock+0x118>)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	011b      	lsls	r3, r3, #4
 80025d0:	440b      	add	r3, r1
 80025d2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	491e      	ldr	r1, [pc, #120]	; (8002654 <inc_lock+0x118>)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	011b      	lsls	r3, r3, #4
 80025de:	440b      	add	r3, r1
 80025e0:	3304      	adds	r3, #4
 80025e2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	695a      	ldr	r2, [r3, #20]
 80025e8:	491a      	ldr	r1, [pc, #104]	; (8002654 <inc_lock+0x118>)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	011b      	lsls	r3, r3, #4
 80025ee:	440b      	add	r3, r1
 80025f0:	3308      	adds	r3, #8
 80025f2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80025f4:	4a17      	ldr	r2, [pc, #92]	; (8002654 <inc_lock+0x118>)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	011b      	lsls	r3, r3, #4
 80025fa:	4413      	add	r3, r2
 80025fc:	330c      	adds	r3, #12
 80025fe:	2200      	movs	r2, #0
 8002600:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d009      	beq.n	800261c <inc_lock+0xe0>
 8002608:	4a12      	ldr	r2, [pc, #72]	; (8002654 <inc_lock+0x118>)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	011b      	lsls	r3, r3, #4
 800260e:	4413      	add	r3, r2
 8002610:	330c      	adds	r3, #12
 8002612:	881b      	ldrh	r3, [r3, #0]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <inc_lock+0xe0>
 8002618:	2300      	movs	r3, #0
 800261a:	e015      	b.n	8002648 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d108      	bne.n	8002634 <inc_lock+0xf8>
 8002622:	4a0c      	ldr	r2, [pc, #48]	; (8002654 <inc_lock+0x118>)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	011b      	lsls	r3, r3, #4
 8002628:	4413      	add	r3, r2
 800262a:	330c      	adds	r3, #12
 800262c:	881b      	ldrh	r3, [r3, #0]
 800262e:	3301      	adds	r3, #1
 8002630:	b29a      	uxth	r2, r3
 8002632:	e001      	b.n	8002638 <inc_lock+0xfc>
 8002634:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002638:	4906      	ldr	r1, [pc, #24]	; (8002654 <inc_lock+0x118>)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	011b      	lsls	r3, r3, #4
 800263e:	440b      	add	r3, r1
 8002640:	330c      	adds	r3, #12
 8002642:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	3301      	adds	r3, #1
}
 8002648:	4618      	mov	r0, r3
 800264a:	3714      	adds	r7, #20
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	200000a8 	.word	0x200000a8

08002658 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	3b01      	subs	r3, #1
 8002664:	607b      	str	r3, [r7, #4]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d825      	bhi.n	80026b8 <dec_lock+0x60>
		n = Files[i].ctr;
 800266c:	4a17      	ldr	r2, [pc, #92]	; (80026cc <dec_lock+0x74>)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	011b      	lsls	r3, r3, #4
 8002672:	4413      	add	r3, r2
 8002674:	330c      	adds	r3, #12
 8002676:	881b      	ldrh	r3, [r3, #0]
 8002678:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800267a:	89fb      	ldrh	r3, [r7, #14]
 800267c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002680:	d101      	bne.n	8002686 <dec_lock+0x2e>
 8002682:	2300      	movs	r3, #0
 8002684:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8002686:	89fb      	ldrh	r3, [r7, #14]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d002      	beq.n	8002692 <dec_lock+0x3a>
 800268c:	89fb      	ldrh	r3, [r7, #14]
 800268e:	3b01      	subs	r3, #1
 8002690:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8002692:	4a0e      	ldr	r2, [pc, #56]	; (80026cc <dec_lock+0x74>)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	011b      	lsls	r3, r3, #4
 8002698:	4413      	add	r3, r2
 800269a:	330c      	adds	r3, #12
 800269c:	89fa      	ldrh	r2, [r7, #14]
 800269e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80026a0:	89fb      	ldrh	r3, [r7, #14]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d105      	bne.n	80026b2 <dec_lock+0x5a>
 80026a6:	4a09      	ldr	r2, [pc, #36]	; (80026cc <dec_lock+0x74>)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	011b      	lsls	r3, r3, #4
 80026ac:	4413      	add	r3, r2
 80026ae:	2200      	movs	r2, #0
 80026b0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80026b2:	2300      	movs	r3, #0
 80026b4:	737b      	strb	r3, [r7, #13]
 80026b6:	e001      	b.n	80026bc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80026b8:	2302      	movs	r3, #2
 80026ba:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80026bc:	7b7b      	ldrb	r3, [r7, #13]
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3714      	adds	r7, #20
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	200000a8 	.word	0x200000a8

080026d0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80026d8:	2300      	movs	r3, #0
 80026da:	60fb      	str	r3, [r7, #12]
 80026dc:	e010      	b.n	8002700 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80026de:	4a0d      	ldr	r2, [pc, #52]	; (8002714 <clear_lock+0x44>)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	011b      	lsls	r3, r3, #4
 80026e4:	4413      	add	r3, r2
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d105      	bne.n	80026fa <clear_lock+0x2a>
 80026ee:	4a09      	ldr	r2, [pc, #36]	; (8002714 <clear_lock+0x44>)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	011b      	lsls	r3, r3, #4
 80026f4:	4413      	add	r3, r2
 80026f6:	2200      	movs	r2, #0
 80026f8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	3301      	adds	r3, #1
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d9eb      	bls.n	80026de <clear_lock+0xe>
	}
}
 8002706:	bf00      	nop
 8002708:	3714      	adds	r7, #20
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	200000a8 	.word	0x200000a8

08002718 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8002720:	2300      	movs	r3, #0
 8002722:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	78db      	ldrb	r3, [r3, #3]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d034      	beq.n	8002796 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002730:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	7858      	ldrb	r0, [r3, #1]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800273c:	2301      	movs	r3, #1
 800273e:	697a      	ldr	r2, [r7, #20]
 8002740:	f7ff fd40 	bl	80021c4 <disk_write>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d002      	beq.n	8002750 <sync_window+0x38>
			res = FR_DISK_ERR;
 800274a:	2301      	movs	r3, #1
 800274c:	73fb      	strb	r3, [r7, #15]
 800274e:	e022      	b.n	8002796 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	697a      	ldr	r2, [r7, #20]
 800275c:	1ad2      	subs	r2, r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	429a      	cmp	r2, r3
 8002764:	d217      	bcs.n	8002796 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	789b      	ldrb	r3, [r3, #2]
 800276a:	613b      	str	r3, [r7, #16]
 800276c:	e010      	b.n	8002790 <sync_window+0x78>
					wsect += fs->fsize;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	4413      	add	r3, r2
 8002776:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	7858      	ldrb	r0, [r3, #1]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8002782:	2301      	movs	r3, #1
 8002784:	697a      	ldr	r2, [r7, #20]
 8002786:	f7ff fd1d 	bl	80021c4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	3b01      	subs	r3, #1
 800278e:	613b      	str	r3, [r7, #16]
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d8eb      	bhi.n	800276e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8002796:	7bfb      	ldrb	r3, [r7, #15]
}
 8002798:	4618      	mov	r0, r3
 800279a:	3718      	adds	r7, #24
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80027aa:	2300      	movs	r3, #0
 80027ac:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d01b      	beq.n	80027f0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f7ff ffad 	bl	8002718 <sync_window>
 80027be:	4603      	mov	r3, r0
 80027c0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80027c2:	7bfb      	ldrb	r3, [r7, #15]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d113      	bne.n	80027f0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	7858      	ldrb	r0, [r3, #1]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80027d2:	2301      	movs	r3, #1
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	f7ff fcd5 	bl	8002184 <disk_read>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d004      	beq.n	80027ea <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80027e0:	f04f 33ff 	mov.w	r3, #4294967295
 80027e4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80027f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3710      	adds	r7, #16
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
	...

080027fc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f7ff ff87 	bl	8002718 <sync_window>
 800280a:	4603      	mov	r3, r0
 800280c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800280e:	7bfb      	ldrb	r3, [r7, #15]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d158      	bne.n	80028c6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	2b03      	cmp	r3, #3
 800281a:	d148      	bne.n	80028ae <sync_fs+0xb2>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	791b      	ldrb	r3, [r3, #4]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d144      	bne.n	80028ae <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	3330      	adds	r3, #48	; 0x30
 8002828:	f44f 7200 	mov.w	r2, #512	; 0x200
 800282c:	2100      	movs	r1, #0
 800282e:	4618      	mov	r0, r3
 8002830:	f7ff fda9 	bl	8002386 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	3330      	adds	r3, #48	; 0x30
 8002838:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800283c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff fd38 	bl	80022b6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	3330      	adds	r3, #48	; 0x30
 800284a:	4921      	ldr	r1, [pc, #132]	; (80028d0 <sync_fs+0xd4>)
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff fd4d 	bl	80022ec <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	3330      	adds	r3, #48	; 0x30
 8002856:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800285a:	491e      	ldr	r1, [pc, #120]	; (80028d4 <sync_fs+0xd8>)
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff fd45 	bl	80022ec <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	3330      	adds	r3, #48	; 0x30
 8002866:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	4619      	mov	r1, r3
 8002870:	4610      	mov	r0, r2
 8002872:	f7ff fd3b 	bl	80022ec <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	3330      	adds	r3, #48	; 0x30
 800287a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	4619      	mov	r1, r3
 8002884:	4610      	mov	r0, r2
 8002886:	f7ff fd31 	bl	80022ec <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	1c5a      	adds	r2, r3, #1
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	7858      	ldrb	r0, [r3, #1]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028a2:	2301      	movs	r3, #1
 80028a4:	f7ff fc8e 	bl	80021c4 <disk_write>
			fs->fsi_flag = 0;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	785b      	ldrb	r3, [r3, #1]
 80028b2:	2200      	movs	r2, #0
 80028b4:	2100      	movs	r1, #0
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7ff fca4 	bl	8002204 <disk_ioctl>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <sync_fs+0xca>
 80028c2:	2301      	movs	r3, #1
 80028c4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80028c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3710      	adds	r7, #16
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	41615252 	.word	0x41615252
 80028d4:	61417272 	.word	0x61417272

080028d8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	3b02      	subs	r3, #2
 80028e6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	695b      	ldr	r3, [r3, #20]
 80028ec:	3b02      	subs	r3, #2
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d301      	bcc.n	80028f8 <clust2sect+0x20>
 80028f4:	2300      	movs	r3, #0
 80028f6:	e008      	b.n	800290a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	895b      	ldrh	r3, [r3, #10]
 80028fc:	461a      	mov	r2, r3
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	fb03 f202 	mul.w	r2, r3, r2
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002908:	4413      	add	r3, r2
}
 800290a:	4618      	mov	r0, r3
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b086      	sub	sp, #24
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
 800291e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d904      	bls.n	8002936 <get_fat+0x20>
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	695b      	ldr	r3, [r3, #20]
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	429a      	cmp	r2, r3
 8002934:	d302      	bcc.n	800293c <get_fat+0x26>
		val = 1;	/* Internal error */
 8002936:	2301      	movs	r3, #1
 8002938:	617b      	str	r3, [r7, #20]
 800293a:	e08c      	b.n	8002a56 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800293c:	f04f 33ff 	mov.w	r3, #4294967295
 8002940:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	2b02      	cmp	r3, #2
 8002948:	d045      	beq.n	80029d6 <get_fat+0xc0>
 800294a:	2b03      	cmp	r3, #3
 800294c:	d05d      	beq.n	8002a0a <get_fat+0xf4>
 800294e:	2b01      	cmp	r3, #1
 8002950:	d177      	bne.n	8002a42 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	60fb      	str	r3, [r7, #12]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	085b      	lsrs	r3, r3, #1
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	4413      	add	r3, r2
 800295e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	6a1a      	ldr	r2, [r3, #32]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	0a5b      	lsrs	r3, r3, #9
 8002968:	4413      	add	r3, r2
 800296a:	4619      	mov	r1, r3
 800296c:	6938      	ldr	r0, [r7, #16]
 800296e:	f7ff ff17 	bl	80027a0 <move_window>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d167      	bne.n	8002a48 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	1c5a      	adds	r2, r3, #1
 800297c:	60fa      	str	r2, [r7, #12]
 800297e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	4413      	add	r3, r2
 8002986:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800298a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	6a1a      	ldr	r2, [r3, #32]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	0a5b      	lsrs	r3, r3, #9
 8002994:	4413      	add	r3, r2
 8002996:	4619      	mov	r1, r3
 8002998:	6938      	ldr	r0, [r7, #16]
 800299a:	f7ff ff01 	bl	80027a0 <move_window>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d153      	bne.n	8002a4c <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	4413      	add	r3, r2
 80029ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80029b2:	021b      	lsls	r3, r3, #8
 80029b4:	461a      	mov	r2, r3
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d002      	beq.n	80029cc <get_fat+0xb6>
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	091b      	lsrs	r3, r3, #4
 80029ca:	e002      	b.n	80029d2 <get_fat+0xbc>
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029d2:	617b      	str	r3, [r7, #20]
			break;
 80029d4:	e03f      	b.n	8002a56 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	6a1a      	ldr	r2, [r3, #32]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	0a1b      	lsrs	r3, r3, #8
 80029de:	4413      	add	r3, r2
 80029e0:	4619      	mov	r1, r3
 80029e2:	6938      	ldr	r0, [r7, #16]
 80029e4:	f7ff fedc 	bl	80027a0 <move_window>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d130      	bne.n	8002a50 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80029fc:	4413      	add	r3, r2
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff fc1e 	bl	8002240 <ld_word>
 8002a04:	4603      	mov	r3, r0
 8002a06:	617b      	str	r3, [r7, #20]
			break;
 8002a08:	e025      	b.n	8002a56 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	6a1a      	ldr	r2, [r3, #32]
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	09db      	lsrs	r3, r3, #7
 8002a12:	4413      	add	r3, r2
 8002a14:	4619      	mov	r1, r3
 8002a16:	6938      	ldr	r0, [r7, #16]
 8002a18:	f7ff fec2 	bl	80027a0 <move_window>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d118      	bne.n	8002a54 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8002a30:	4413      	add	r3, r2
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7ff fc1c 	bl	8002270 <ld_dword>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002a3e:	617b      	str	r3, [r7, #20]
			break;
 8002a40:	e009      	b.n	8002a56 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8002a42:	2301      	movs	r3, #1
 8002a44:	617b      	str	r3, [r7, #20]
 8002a46:	e006      	b.n	8002a56 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002a48:	bf00      	nop
 8002a4a:	e004      	b.n	8002a56 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002a4c:	bf00      	nop
 8002a4e:	e002      	b.n	8002a56 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8002a50:	bf00      	nop
 8002a52:	e000      	b.n	8002a56 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8002a54:	bf00      	nop
		}
	}

	return val;
 8002a56:	697b      	ldr	r3, [r7, #20]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3718      	adds	r7, #24
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8002a60:	b590      	push	{r4, r7, lr}
 8002a62:	b089      	sub	sp, #36	; 0x24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	f240 80d6 	bls.w	8002c24 <put_fat+0x1c4>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	695b      	ldr	r3, [r3, #20]
 8002a7c:	68ba      	ldr	r2, [r7, #8]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	f080 80d0 	bcs.w	8002c24 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d073      	beq.n	8002b74 <put_fat+0x114>
 8002a8c:	2b03      	cmp	r3, #3
 8002a8e:	f000 8091 	beq.w	8002bb4 <put_fat+0x154>
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	f040 80c6 	bne.w	8002c24 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	61bb      	str	r3, [r7, #24]
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	085b      	lsrs	r3, r3, #1
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6a1a      	ldr	r2, [r3, #32]
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	0a5b      	lsrs	r3, r3, #9
 8002aae:	4413      	add	r3, r2
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f7ff fe74 	bl	80027a0 <move_window>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002abc:	7ffb      	ldrb	r3, [r7, #31]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f040 80a9 	bne.w	8002c16 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	1c59      	adds	r1, r3, #1
 8002ace:	61b9      	str	r1, [r7, #24]
 8002ad0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ad4:	4413      	add	r3, r2
 8002ad6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00d      	beq.n	8002afe <put_fat+0x9e>
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	b25b      	sxtb	r3, r3
 8002ae8:	f003 030f 	and.w	r3, r3, #15
 8002aec:	b25a      	sxtb	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	011b      	lsls	r3, r3, #4
 8002af4:	b25b      	sxtb	r3, r3
 8002af6:	4313      	orrs	r3, r2
 8002af8:	b25b      	sxtb	r3, r3
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	e001      	b.n	8002b02 <put_fat+0xa2>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6a1a      	ldr	r2, [r3, #32]
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	0a5b      	lsrs	r3, r3, #9
 8002b14:	4413      	add	r3, r2
 8002b16:	4619      	mov	r1, r3
 8002b18:	68f8      	ldr	r0, [r7, #12]
 8002b1a:	f7ff fe41 	bl	80027a0 <move_window>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002b22:	7ffb      	ldrb	r3, [r7, #31]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d178      	bne.n	8002c1a <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b34:	4413      	add	r3, r2
 8002b36:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <put_fat+0xea>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	091b      	lsrs	r3, r3, #4
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	e00e      	b.n	8002b68 <put_fat+0x108>
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	b25b      	sxtb	r3, r3
 8002b50:	f023 030f 	bic.w	r3, r3, #15
 8002b54:	b25a      	sxtb	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	0a1b      	lsrs	r3, r3, #8
 8002b5a:	b25b      	sxtb	r3, r3
 8002b5c:	f003 030f 	and.w	r3, r3, #15
 8002b60:	b25b      	sxtb	r3, r3
 8002b62:	4313      	orrs	r3, r2
 8002b64:	b25b      	sxtb	r3, r3
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	697a      	ldr	r2, [r7, #20]
 8002b6a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	70da      	strb	r2, [r3, #3]
			break;
 8002b72:	e057      	b.n	8002c24 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6a1a      	ldr	r2, [r3, #32]
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	0a1b      	lsrs	r3, r3, #8
 8002b7c:	4413      	add	r3, r2
 8002b7e:	4619      	mov	r1, r3
 8002b80:	68f8      	ldr	r0, [r7, #12]
 8002b82:	f7ff fe0d 	bl	80027a0 <move_window>
 8002b86:	4603      	mov	r3, r0
 8002b88:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002b8a:	7ffb      	ldrb	r3, [r7, #31]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d146      	bne.n	8002c1e <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8002b9e:	4413      	add	r3, r2
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	b292      	uxth	r2, r2
 8002ba4:	4611      	mov	r1, r2
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7ff fb85 	bl	80022b6 <st_word>
			fs->wflag = 1;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	70da      	strb	r2, [r3, #3]
			break;
 8002bb2:	e037      	b.n	8002c24 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6a1a      	ldr	r2, [r3, #32]
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	09db      	lsrs	r3, r3, #7
 8002bbc:	4413      	add	r3, r2
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	68f8      	ldr	r0, [r7, #12]
 8002bc2:	f7ff fded 	bl	80027a0 <move_window>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002bca:	7ffb      	ldrb	r3, [r7, #31]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d128      	bne.n	8002c22 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8002be4:	4413      	add	r3, r2
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7ff fb42 	bl	8002270 <ld_dword>
 8002bec:	4603      	mov	r3, r0
 8002bee:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002bf2:	4323      	orrs	r3, r4
 8002bf4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8002c04:	4413      	add	r3, r2
 8002c06:	6879      	ldr	r1, [r7, #4]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7ff fb6f 	bl	80022ec <st_dword>
			fs->wflag = 1;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2201      	movs	r2, #1
 8002c12:	70da      	strb	r2, [r3, #3]
			break;
 8002c14:	e006      	b.n	8002c24 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8002c16:	bf00      	nop
 8002c18:	e004      	b.n	8002c24 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8002c1a:	bf00      	nop
 8002c1c:	e002      	b.n	8002c24 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8002c1e:	bf00      	nop
 8002c20:	e000      	b.n	8002c24 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8002c22:	bf00      	nop
		}
	}
	return res;
 8002c24:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3724      	adds	r7, #36	; 0x24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd90      	pop	{r4, r7, pc}

08002c2e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b088      	sub	sp, #32
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	60f8      	str	r0, [r7, #12]
 8002c36:	60b9      	str	r1, [r7, #8]
 8002c38:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d904      	bls.n	8002c54 <remove_chain+0x26>
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	68ba      	ldr	r2, [r7, #8]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d301      	bcc.n	8002c58 <remove_chain+0x2a>
 8002c54:	2302      	movs	r3, #2
 8002c56:	e04b      	b.n	8002cf0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00c      	beq.n	8002c78 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8002c5e:	f04f 32ff 	mov.w	r2, #4294967295
 8002c62:	6879      	ldr	r1, [r7, #4]
 8002c64:	69b8      	ldr	r0, [r7, #24]
 8002c66:	f7ff fefb 	bl	8002a60 <put_fat>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8002c6e:	7ffb      	ldrb	r3, [r7, #31]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <remove_chain+0x4a>
 8002c74:	7ffb      	ldrb	r3, [r7, #31]
 8002c76:	e03b      	b.n	8002cf0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8002c78:	68b9      	ldr	r1, [r7, #8]
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f7ff fe4b 	bl	8002916 <get_fat>
 8002c80:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d031      	beq.n	8002cec <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d101      	bne.n	8002c92 <remove_chain+0x64>
 8002c8e:	2302      	movs	r3, #2
 8002c90:	e02e      	b.n	8002cf0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c98:	d101      	bne.n	8002c9e <remove_chain+0x70>
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e028      	b.n	8002cf0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	68b9      	ldr	r1, [r7, #8]
 8002ca2:	69b8      	ldr	r0, [r7, #24]
 8002ca4:	f7ff fedc 	bl	8002a60 <put_fat>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8002cac:	7ffb      	ldrb	r3, [r7, #31]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <remove_chain+0x88>
 8002cb2:	7ffb      	ldrb	r3, [r7, #31]
 8002cb4:	e01c      	b.n	8002cf0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	691a      	ldr	r2, [r3, #16]
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	3b02      	subs	r3, #2
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d20b      	bcs.n	8002cdc <remove_chain+0xae>
			fs->free_clst++;
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	1c5a      	adds	r2, r3, #1
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	791b      	ldrb	r3, [r3, #4]
 8002cd2:	f043 0301 	orr.w	r3, r3, #1
 8002cd6:	b2da      	uxtb	r2, r3
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	68ba      	ldr	r2, [r7, #8]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d3c6      	bcc.n	8002c78 <remove_chain+0x4a>
 8002cea:	e000      	b.n	8002cee <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8002cec:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3720      	adds	r7, #32
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b088      	sub	sp, #32
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d10d      	bne.n	8002d2a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d004      	beq.n	8002d24 <create_chain+0x2c>
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d31b      	bcc.n	8002d5c <create_chain+0x64>
 8002d24:	2301      	movs	r3, #1
 8002d26:	61bb      	str	r3, [r7, #24]
 8002d28:	e018      	b.n	8002d5c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8002d2a:	6839      	ldr	r1, [r7, #0]
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f7ff fdf2 	bl	8002916 <get_fat>
 8002d32:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d801      	bhi.n	8002d3e <create_chain+0x46>
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e070      	b.n	8002e20 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d44:	d101      	bne.n	8002d4a <create_chain+0x52>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	e06a      	b.n	8002e20 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d201      	bcs.n	8002d58 <create_chain+0x60>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	e063      	b.n	8002e20 <create_chain+0x128>
		scl = clst;
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	3301      	adds	r3, #1
 8002d64:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	69fa      	ldr	r2, [r7, #28]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d307      	bcc.n	8002d80 <create_chain+0x88>
				ncl = 2;
 8002d70:	2302      	movs	r3, #2
 8002d72:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8002d74:	69fa      	ldr	r2, [r7, #28]
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d901      	bls.n	8002d80 <create_chain+0x88>
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	e04f      	b.n	8002e20 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8002d80:	69f9      	ldr	r1, [r7, #28]
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f7ff fdc7 	bl	8002916 <get_fat>
 8002d88:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00e      	beq.n	8002dae <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d003      	beq.n	8002d9e <create_chain+0xa6>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d9c:	d101      	bne.n	8002da2 <create_chain+0xaa>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	e03e      	b.n	8002e20 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8002da2:	69fa      	ldr	r2, [r7, #28]
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d1da      	bne.n	8002d60 <create_chain+0x68>
 8002daa:	2300      	movs	r3, #0
 8002dac:	e038      	b.n	8002e20 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8002dae:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8002db0:	f04f 32ff 	mov.w	r2, #4294967295
 8002db4:	69f9      	ldr	r1, [r7, #28]
 8002db6:	6938      	ldr	r0, [r7, #16]
 8002db8:	f7ff fe52 	bl	8002a60 <put_fat>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8002dc0:	7dfb      	ldrb	r3, [r7, #23]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d109      	bne.n	8002dda <create_chain+0xe2>
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d006      	beq.n	8002dda <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8002dcc:	69fa      	ldr	r2, [r7, #28]
 8002dce:	6839      	ldr	r1, [r7, #0]
 8002dd0:	6938      	ldr	r0, [r7, #16]
 8002dd2:	f7ff fe45 	bl	8002a60 <put_fat>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8002dda:	7dfb      	ldrb	r3, [r7, #23]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d116      	bne.n	8002e0e <create_chain+0x116>
		fs->last_clst = ncl;
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	69fa      	ldr	r2, [r7, #28]
 8002de4:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	691a      	ldr	r2, [r3, #16]
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	695b      	ldr	r3, [r3, #20]
 8002dee:	3b02      	subs	r3, #2
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d804      	bhi.n	8002dfe <create_chain+0x106>
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	1e5a      	subs	r2, r3, #1
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	791b      	ldrb	r3, [r3, #4]
 8002e02:	f043 0301 	orr.w	r3, r3, #1
 8002e06:	b2da      	uxtb	r2, r3
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	711a      	strb	r2, [r3, #4]
 8002e0c:	e007      	b.n	8002e1e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8002e0e:	7dfb      	ldrb	r3, [r7, #23]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d102      	bne.n	8002e1a <create_chain+0x122>
 8002e14:	f04f 33ff 	mov.w	r3, #4294967295
 8002e18:	e000      	b.n	8002e1c <create_chain+0x124>
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8002e1e:	69fb      	ldr	r3, [r7, #28]
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3720      	adds	r7, #32
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b087      	sub	sp, #28
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3c:	3304      	adds	r3, #4
 8002e3e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	0a5b      	lsrs	r3, r3, #9
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	8952      	ldrh	r2, [r2, #10]
 8002e48:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e4c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1d1a      	adds	r2, r3, #4
 8002e52:	613a      	str	r2, [r7, #16]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <clmt_clust+0x3a>
 8002e5e:	2300      	movs	r3, #0
 8002e60:	e010      	b.n	8002e84 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d307      	bcc.n	8002e7a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8002e6a:	697a      	ldr	r2, [r7, #20]
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	617b      	str	r3, [r7, #20]
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	3304      	adds	r3, #4
 8002e76:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8002e78:	e7e9      	b.n	8002e4e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8002e7a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	4413      	add	r3, r2
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	371c      	adds	r7, #28
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ea6:	d204      	bcs.n	8002eb2 <dir_sdi+0x22>
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	f003 031f 	and.w	r3, r3, #31
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <dir_sdi+0x26>
		return FR_INT_ERR;
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	e063      	b.n	8002f7e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d106      	bne.n	8002ed6 <dir_sdi+0x46>
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d902      	bls.n	8002ed6 <dir_sdi+0x46>
		clst = fs->dirbase;
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d10c      	bne.n	8002ef6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	095b      	lsrs	r3, r3, #5
 8002ee0:	693a      	ldr	r2, [r7, #16]
 8002ee2:	8912      	ldrh	r2, [r2, #8]
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d301      	bcc.n	8002eec <dir_sdi+0x5c>
 8002ee8:	2302      	movs	r3, #2
 8002eea:	e048      	b.n	8002f7e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	61da      	str	r2, [r3, #28]
 8002ef4:	e029      	b.n	8002f4a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	895b      	ldrh	r3, [r3, #10]
 8002efa:	025b      	lsls	r3, r3, #9
 8002efc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8002efe:	e019      	b.n	8002f34 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6979      	ldr	r1, [r7, #20]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff fd06 	bl	8002916 <get_fat>
 8002f0a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f12:	d101      	bne.n	8002f18 <dir_sdi+0x88>
 8002f14:	2301      	movs	r3, #1
 8002f16:	e032      	b.n	8002f7e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d904      	bls.n	8002f28 <dir_sdi+0x98>
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	697a      	ldr	r2, [r7, #20]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d301      	bcc.n	8002f2c <dir_sdi+0x9c>
 8002f28:	2302      	movs	r3, #2
 8002f2a:	e028      	b.n	8002f7e <dir_sdi+0xee>
			ofs -= csz;
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d2e1      	bcs.n	8002f00 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8002f3c:	6979      	ldr	r1, [r7, #20]
 8002f3e:	6938      	ldr	r0, [r7, #16]
 8002f40:	f7ff fcca 	bl	80028d8 <clust2sect>
 8002f44:	4602      	mov	r2, r0
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	69db      	ldr	r3, [r3, #28]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d101      	bne.n	8002f5c <dir_sdi+0xcc>
 8002f58:	2302      	movs	r3, #2
 8002f5a:	e010      	b.n	8002f7e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	69da      	ldr	r2, [r3, #28]
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	0a5b      	lsrs	r3, r3, #9
 8002f64:	441a      	add	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f76:	441a      	add	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3718      	adds	r7, #24
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b086      	sub	sp, #24
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
 8002f8e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	3320      	adds	r3, #32
 8002f9c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69db      	ldr	r3, [r3, #28]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d003      	beq.n	8002fae <dir_next+0x28>
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fac:	d301      	bcc.n	8002fb2 <dir_next+0x2c>
 8002fae:	2304      	movs	r3, #4
 8002fb0:	e0aa      	b.n	8003108 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f040 8098 	bne.w	80030ee <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	1c5a      	adds	r2, r3, #1
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d10b      	bne.n	8002fe8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	095b      	lsrs	r3, r3, #5
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	8912      	ldrh	r2, [r2, #8]
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	f0c0 8088 	bcc.w	80030ee <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	61da      	str	r2, [r3, #28]
 8002fe4:	2304      	movs	r3, #4
 8002fe6:	e08f      	b.n	8003108 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	0a5b      	lsrs	r3, r3, #9
 8002fec:	68fa      	ldr	r2, [r7, #12]
 8002fee:	8952      	ldrh	r2, [r2, #10]
 8002ff0:	3a01      	subs	r2, #1
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d17a      	bne.n	80030ee <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	4619      	mov	r1, r3
 8003000:	4610      	mov	r0, r2
 8003002:	f7ff fc88 	bl	8002916 <get_fat>
 8003006:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d801      	bhi.n	8003012 <dir_next+0x8c>
 800300e:	2302      	movs	r3, #2
 8003010:	e07a      	b.n	8003108 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003018:	d101      	bne.n	800301e <dir_next+0x98>
 800301a:	2301      	movs	r3, #1
 800301c:	e074      	b.n	8003108 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	697a      	ldr	r2, [r7, #20]
 8003024:	429a      	cmp	r2, r3
 8003026:	d358      	bcc.n	80030da <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d104      	bne.n	8003038 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	61da      	str	r2, [r3, #28]
 8003034:	2304      	movs	r3, #4
 8003036:	e067      	b.n	8003108 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	699b      	ldr	r3, [r3, #24]
 800303e:	4619      	mov	r1, r3
 8003040:	4610      	mov	r0, r2
 8003042:	f7ff fe59 	bl	8002cf8 <create_chain>
 8003046:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <dir_next+0xcc>
 800304e:	2307      	movs	r3, #7
 8003050:	e05a      	b.n	8003108 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d101      	bne.n	800305c <dir_next+0xd6>
 8003058:	2302      	movs	r3, #2
 800305a:	e055      	b.n	8003108 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003062:	d101      	bne.n	8003068 <dir_next+0xe2>
 8003064:	2301      	movs	r3, #1
 8003066:	e04f      	b.n	8003108 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8003068:	68f8      	ldr	r0, [r7, #12]
 800306a:	f7ff fb55 	bl	8002718 <sync_window>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d001      	beq.n	8003078 <dir_next+0xf2>
 8003074:	2301      	movs	r3, #1
 8003076:	e047      	b.n	8003108 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	3330      	adds	r3, #48	; 0x30
 800307c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003080:	2100      	movs	r1, #0
 8003082:	4618      	mov	r0, r3
 8003084:	f7ff f97f 	bl	8002386 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8003088:	2300      	movs	r3, #0
 800308a:	613b      	str	r3, [r7, #16]
 800308c:	6979      	ldr	r1, [r7, #20]
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f7ff fc22 	bl	80028d8 <clust2sect>
 8003094:	4602      	mov	r2, r0
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	62da      	str	r2, [r3, #44]	; 0x2c
 800309a:	e012      	b.n	80030c2 <dir_next+0x13c>
						fs->wflag = 1;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2201      	movs	r2, #1
 80030a0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	f7ff fb38 	bl	8002718 <sync_window>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <dir_next+0x12c>
 80030ae:	2301      	movs	r3, #1
 80030b0:	e02a      	b.n	8003108 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	3301      	adds	r3, #1
 80030b6:	613b      	str	r3, [r7, #16]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030bc:	1c5a      	adds	r2, r3, #1
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	895b      	ldrh	r3, [r3, #10]
 80030c6:	461a      	mov	r2, r3
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d3e6      	bcc.n	800309c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad2      	subs	r2, r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	697a      	ldr	r2, [r7, #20]
 80030de:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80030e0:	6979      	ldr	r1, [r7, #20]
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f7ff fbf8 	bl	80028d8 <clust2sect>
 80030e8:	4602      	mov	r2, r0
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	68ba      	ldr	r2, [r7, #8]
 80030f2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003100:	441a      	add	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	3718      	adds	r7, #24
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8003120:	2100      	movs	r1, #0
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f7ff feb4 	bl	8002e90 <dir_sdi>
 8003128:	4603      	mov	r3, r0
 800312a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800312c:	7dfb      	ldrb	r3, [r7, #23]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d12b      	bne.n	800318a <dir_alloc+0x7a>
		n = 0;
 8003132:	2300      	movs	r3, #0
 8003134:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	69db      	ldr	r3, [r3, #28]
 800313a:	4619      	mov	r1, r3
 800313c:	68f8      	ldr	r0, [r7, #12]
 800313e:	f7ff fb2f 	bl	80027a0 <move_window>
 8003142:	4603      	mov	r3, r0
 8003144:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8003146:	7dfb      	ldrb	r3, [r7, #23]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d11d      	bne.n	8003188 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a1b      	ldr	r3, [r3, #32]
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	2be5      	cmp	r3, #229	; 0xe5
 8003154:	d004      	beq.n	8003160 <dir_alloc+0x50>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d107      	bne.n	8003170 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	3301      	adds	r3, #1
 8003164:	613b      	str	r3, [r7, #16]
 8003166:	693a      	ldr	r2, [r7, #16]
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	429a      	cmp	r2, r3
 800316c:	d102      	bne.n	8003174 <dir_alloc+0x64>
 800316e:	e00c      	b.n	800318a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8003170:	2300      	movs	r3, #0
 8003172:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8003174:	2101      	movs	r1, #1
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f7ff ff05 	bl	8002f86 <dir_next>
 800317c:	4603      	mov	r3, r0
 800317e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8003180:	7dfb      	ldrb	r3, [r7, #23]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d0d7      	beq.n	8003136 <dir_alloc+0x26>
 8003186:	e000      	b.n	800318a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8003188:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800318a:	7dfb      	ldrb	r3, [r7, #23]
 800318c:	2b04      	cmp	r3, #4
 800318e:	d101      	bne.n	8003194 <dir_alloc+0x84>
 8003190:	2307      	movs	r3, #7
 8003192:	75fb      	strb	r3, [r7, #23]
	return res;
 8003194:	7dfb      	ldrb	r3, [r7, #23]
}
 8003196:	4618      	mov	r0, r3
 8003198:	3718      	adds	r7, #24
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b084      	sub	sp, #16
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
 80031a6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	331a      	adds	r3, #26
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7ff f847 	bl	8002240 <ld_word>
 80031b2:	4603      	mov	r3, r0
 80031b4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	2b03      	cmp	r3, #3
 80031bc:	d109      	bne.n	80031d2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	3314      	adds	r3, #20
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff f83c 	bl	8002240 <ld_word>
 80031c8:	4603      	mov	r3, r0
 80031ca:	041b      	lsls	r3, r3, #16
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80031d2:	68fb      	ldr	r3, [r7, #12]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3710      	adds	r7, #16
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	331a      	adds	r3, #26
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	b292      	uxth	r2, r2
 80031f0:	4611      	mov	r1, r2
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff f85f 	bl	80022b6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	2b03      	cmp	r3, #3
 80031fe:	d109      	bne.n	8003214 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	f103 0214 	add.w	r2, r3, #20
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	0c1b      	lsrs	r3, r3, #16
 800320a:	b29b      	uxth	r3, r3
 800320c:	4619      	mov	r1, r3
 800320e:	4610      	mov	r0, r2
 8003210:	f7ff f851 	bl	80022b6 <st_word>
	}
}
 8003214:	bf00      	nop
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800322a:	2100      	movs	r1, #0
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f7ff fe2f 	bl	8002e90 <dir_sdi>
 8003232:	4603      	mov	r3, r0
 8003234:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8003236:	7dfb      	ldrb	r3, [r7, #23]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d001      	beq.n	8003240 <dir_find+0x24>
 800323c:	7dfb      	ldrb	r3, [r7, #23]
 800323e:	e03e      	b.n	80032be <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	69db      	ldr	r3, [r3, #28]
 8003244:	4619      	mov	r1, r3
 8003246:	6938      	ldr	r0, [r7, #16]
 8003248:	f7ff faaa 	bl	80027a0 <move_window>
 800324c:	4603      	mov	r3, r0
 800324e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8003250:	7dfb      	ldrb	r3, [r7, #23]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d12f      	bne.n	80032b6 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a1b      	ldr	r3, [r3, #32]
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800325e:	7bfb      	ldrb	r3, [r7, #15]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d102      	bne.n	800326a <dir_find+0x4e>
 8003264:	2304      	movs	r3, #4
 8003266:	75fb      	strb	r3, [r7, #23]
 8003268:	e028      	b.n	80032bc <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	330b      	adds	r3, #11
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003276:	b2da      	uxtb	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a1b      	ldr	r3, [r3, #32]
 8003280:	330b      	adds	r3, #11
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	f003 0308 	and.w	r3, r3, #8
 8003288:	2b00      	cmp	r3, #0
 800328a:	d10a      	bne.n	80032a2 <dir_find+0x86>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a18      	ldr	r0, [r3, #32]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	3324      	adds	r3, #36	; 0x24
 8003294:	220b      	movs	r2, #11
 8003296:	4619      	mov	r1, r3
 8003298:	f7ff f88f 	bl	80023ba <mem_cmp>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00b      	beq.n	80032ba <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80032a2:	2100      	movs	r1, #0
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f7ff fe6e 	bl	8002f86 <dir_next>
 80032aa:	4603      	mov	r3, r0
 80032ac:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80032ae:	7dfb      	ldrb	r3, [r7, #23]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d0c5      	beq.n	8003240 <dir_find+0x24>
 80032b4:	e002      	b.n	80032bc <dir_find+0xa0>
		if (res != FR_OK) break;
 80032b6:	bf00      	nop
 80032b8:	e000      	b.n	80032bc <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80032ba:	bf00      	nop

	return res;
 80032bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3718      	adds	r7, #24
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b084      	sub	sp, #16
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80032d4:	2101      	movs	r1, #1
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f7ff ff1a 	bl	8003110 <dir_alloc>
 80032dc:	4603      	mov	r3, r0
 80032de:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80032e0:	7bfb      	ldrb	r3, [r7, #15]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d11c      	bne.n	8003320 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	69db      	ldr	r3, [r3, #28]
 80032ea:	4619      	mov	r1, r3
 80032ec:	68b8      	ldr	r0, [r7, #8]
 80032ee:	f7ff fa57 	bl	80027a0 <move_window>
 80032f2:	4603      	mov	r3, r0
 80032f4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80032f6:	7bfb      	ldrb	r3, [r7, #15]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d111      	bne.n	8003320 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a1b      	ldr	r3, [r3, #32]
 8003300:	2220      	movs	r2, #32
 8003302:	2100      	movs	r1, #0
 8003304:	4618      	mov	r0, r3
 8003306:	f7ff f83e 	bl	8002386 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a18      	ldr	r0, [r3, #32]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	3324      	adds	r3, #36	; 0x24
 8003312:	220b      	movs	r2, #11
 8003314:	4619      	mov	r1, r3
 8003316:	f7ff f815 	bl	8002344 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	2201      	movs	r2, #1
 800331e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8003320:	7bfb      	ldrb	r3, [r7, #15]
}
 8003322:	4618      	mov	r0, r3
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
	...

0800332c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b088      	sub	sp, #32
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	60fb      	str	r3, [r7, #12]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	3324      	adds	r3, #36	; 0x24
 8003340:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8003342:	220b      	movs	r2, #11
 8003344:	2120      	movs	r1, #32
 8003346:	68b8      	ldr	r0, [r7, #8]
 8003348:	f7ff f81d 	bl	8002386 <mem_set>
	si = i = 0; ni = 8;
 800334c:	2300      	movs	r3, #0
 800334e:	613b      	str	r3, [r7, #16]
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	617b      	str	r3, [r7, #20]
 8003354:	2308      	movs	r3, #8
 8003356:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	1c5a      	adds	r2, r3, #1
 800335c:	617a      	str	r2, [r7, #20]
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	4413      	add	r3, r2
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8003366:	7ffb      	ldrb	r3, [r7, #31]
 8003368:	2b20      	cmp	r3, #32
 800336a:	d94e      	bls.n	800340a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800336c:	7ffb      	ldrb	r3, [r7, #31]
 800336e:	2b2f      	cmp	r3, #47	; 0x2f
 8003370:	d006      	beq.n	8003380 <create_name+0x54>
 8003372:	7ffb      	ldrb	r3, [r7, #31]
 8003374:	2b5c      	cmp	r3, #92	; 0x5c
 8003376:	d110      	bne.n	800339a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8003378:	e002      	b.n	8003380 <create_name+0x54>
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	3301      	adds	r3, #1
 800337e:	617b      	str	r3, [r7, #20]
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	4413      	add	r3, r2
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	2b2f      	cmp	r3, #47	; 0x2f
 800338a:	d0f6      	beq.n	800337a <create_name+0x4e>
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	4413      	add	r3, r2
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	2b5c      	cmp	r3, #92	; 0x5c
 8003396:	d0f0      	beq.n	800337a <create_name+0x4e>
			break;
 8003398:	e038      	b.n	800340c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800339a:	7ffb      	ldrb	r3, [r7, #31]
 800339c:	2b2e      	cmp	r3, #46	; 0x2e
 800339e:	d003      	beq.n	80033a8 <create_name+0x7c>
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d30c      	bcc.n	80033c2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	2b0b      	cmp	r3, #11
 80033ac:	d002      	beq.n	80033b4 <create_name+0x88>
 80033ae:	7ffb      	ldrb	r3, [r7, #31]
 80033b0:	2b2e      	cmp	r3, #46	; 0x2e
 80033b2:	d001      	beq.n	80033b8 <create_name+0x8c>
 80033b4:	2306      	movs	r3, #6
 80033b6:	e044      	b.n	8003442 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80033b8:	2308      	movs	r3, #8
 80033ba:	613b      	str	r3, [r7, #16]
 80033bc:	230b      	movs	r3, #11
 80033be:	61bb      	str	r3, [r7, #24]
			continue;
 80033c0:	e022      	b.n	8003408 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80033c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	da04      	bge.n	80033d4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80033ca:	7ffb      	ldrb	r3, [r7, #31]
 80033cc:	3b80      	subs	r3, #128	; 0x80
 80033ce:	4a1f      	ldr	r2, [pc, #124]	; (800344c <create_name+0x120>)
 80033d0:	5cd3      	ldrb	r3, [r2, r3]
 80033d2:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80033d4:	7ffb      	ldrb	r3, [r7, #31]
 80033d6:	4619      	mov	r1, r3
 80033d8:	481d      	ldr	r0, [pc, #116]	; (8003450 <create_name+0x124>)
 80033da:	f7ff f815 	bl	8002408 <chk_chr>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d001      	beq.n	80033e8 <create_name+0xbc>
 80033e4:	2306      	movs	r3, #6
 80033e6:	e02c      	b.n	8003442 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80033e8:	7ffb      	ldrb	r3, [r7, #31]
 80033ea:	2b60      	cmp	r3, #96	; 0x60
 80033ec:	d905      	bls.n	80033fa <create_name+0xce>
 80033ee:	7ffb      	ldrb	r3, [r7, #31]
 80033f0:	2b7a      	cmp	r3, #122	; 0x7a
 80033f2:	d802      	bhi.n	80033fa <create_name+0xce>
 80033f4:	7ffb      	ldrb	r3, [r7, #31]
 80033f6:	3b20      	subs	r3, #32
 80033f8:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	1c5a      	adds	r2, r3, #1
 80033fe:	613a      	str	r2, [r7, #16]
 8003400:	68ba      	ldr	r2, [r7, #8]
 8003402:	4413      	add	r3, r2
 8003404:	7ffa      	ldrb	r2, [r7, #31]
 8003406:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8003408:	e7a6      	b.n	8003358 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800340a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	441a      	add	r2, r3
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d101      	bne.n	8003420 <create_name+0xf4>
 800341c:	2306      	movs	r3, #6
 800341e:	e010      	b.n	8003442 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	2be5      	cmp	r3, #229	; 0xe5
 8003426:	d102      	bne.n	800342e <create_name+0x102>
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	2205      	movs	r2, #5
 800342c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800342e:	7ffb      	ldrb	r3, [r7, #31]
 8003430:	2b20      	cmp	r3, #32
 8003432:	d801      	bhi.n	8003438 <create_name+0x10c>
 8003434:	2204      	movs	r2, #4
 8003436:	e000      	b.n	800343a <create_name+0x10e>
 8003438:	2200      	movs	r2, #0
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	330b      	adds	r3, #11
 800343e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8003440:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8003442:	4618      	mov	r0, r3
 8003444:	3720      	adds	r7, #32
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	080047b4 	.word	0x080047b4
 8003450:	08004760 	.word	0x08004760

08003454 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8003468:	e002      	b.n	8003470 <follow_path+0x1c>
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	3301      	adds	r3, #1
 800346e:	603b      	str	r3, [r7, #0]
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	2b2f      	cmp	r3, #47	; 0x2f
 8003476:	d0f8      	beq.n	800346a <follow_path+0x16>
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	2b5c      	cmp	r3, #92	; 0x5c
 800347e:	d0f4      	beq.n	800346a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	2200      	movs	r2, #0
 8003484:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	2b1f      	cmp	r3, #31
 800348c:	d80a      	bhi.n	80034a4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2280      	movs	r2, #128	; 0x80
 8003492:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8003496:	2100      	movs	r1, #0
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f7ff fcf9 	bl	8002e90 <dir_sdi>
 800349e:	4603      	mov	r3, r0
 80034a0:	75fb      	strb	r3, [r7, #23]
 80034a2:	e043      	b.n	800352c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80034a4:	463b      	mov	r3, r7
 80034a6:	4619      	mov	r1, r3
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f7ff ff3f 	bl	800332c <create_name>
 80034ae:	4603      	mov	r3, r0
 80034b0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80034b2:	7dfb      	ldrb	r3, [r7, #23]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d134      	bne.n	8003522 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f7ff feaf 	bl	800321c <dir_find>
 80034be:	4603      	mov	r3, r0
 80034c0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80034c8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80034ca:	7dfb      	ldrb	r3, [r7, #23]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00a      	beq.n	80034e6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80034d0:	7dfb      	ldrb	r3, [r7, #23]
 80034d2:	2b04      	cmp	r3, #4
 80034d4:	d127      	bne.n	8003526 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80034d6:	7afb      	ldrb	r3, [r7, #11]
 80034d8:	f003 0304 	and.w	r3, r3, #4
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d122      	bne.n	8003526 <follow_path+0xd2>
 80034e0:	2305      	movs	r3, #5
 80034e2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80034e4:	e01f      	b.n	8003526 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80034e6:	7afb      	ldrb	r3, [r7, #11]
 80034e8:	f003 0304 	and.w	r3, r3, #4
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d11c      	bne.n	800352a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	799b      	ldrb	r3, [r3, #6]
 80034f4:	f003 0310 	and.w	r3, r3, #16
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d102      	bne.n	8003502 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80034fc:	2305      	movs	r3, #5
 80034fe:	75fb      	strb	r3, [r7, #23]
 8003500:	e014      	b.n	800352c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	695b      	ldr	r3, [r3, #20]
 800350c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003510:	4413      	add	r3, r2
 8003512:	4619      	mov	r1, r3
 8003514:	68f8      	ldr	r0, [r7, #12]
 8003516:	f7ff fe42 	bl	800319e <ld_clust>
 800351a:	4602      	mov	r2, r0
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8003520:	e7c0      	b.n	80034a4 <follow_path+0x50>
			if (res != FR_OK) break;
 8003522:	bf00      	nop
 8003524:	e002      	b.n	800352c <follow_path+0xd8>
				break;
 8003526:	bf00      	nop
 8003528:	e000      	b.n	800352c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800352a:	bf00      	nop
			}
		}
	}

	return res;
 800352c:	7dfb      	ldrb	r3, [r7, #23]
}
 800352e:	4618      	mov	r0, r3
 8003530:	3718      	adds	r7, #24
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8003536:	b480      	push	{r7}
 8003538:	b087      	sub	sp, #28
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800353e:	f04f 33ff 	mov.w	r3, #4294967295
 8003542:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d031      	beq.n	80035b0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	617b      	str	r3, [r7, #20]
 8003552:	e002      	b.n	800355a <get_ldnumber+0x24>
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	3301      	adds	r3, #1
 8003558:	617b      	str	r3, [r7, #20]
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	2b20      	cmp	r3, #32
 8003560:	d903      	bls.n	800356a <get_ldnumber+0x34>
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	2b3a      	cmp	r3, #58	; 0x3a
 8003568:	d1f4      	bne.n	8003554 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	2b3a      	cmp	r3, #58	; 0x3a
 8003570:	d11c      	bne.n	80035ac <get_ldnumber+0x76>
			tp = *path;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	1c5a      	adds	r2, r3, #1
 800357c:	60fa      	str	r2, [r7, #12]
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	3b30      	subs	r3, #48	; 0x30
 8003582:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	2b09      	cmp	r3, #9
 8003588:	d80e      	bhi.n	80035a8 <get_ldnumber+0x72>
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	429a      	cmp	r2, r3
 8003590:	d10a      	bne.n	80035a8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d107      	bne.n	80035a8 <get_ldnumber+0x72>
					vol = (int)i;
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	3301      	adds	r3, #1
 80035a0:	617b      	str	r3, [r7, #20]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	e002      	b.n	80035b2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80035ac:	2300      	movs	r3, #0
 80035ae:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80035b0:	693b      	ldr	r3, [r7, #16]
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	371c      	adds	r7, #28
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
	...

080035c0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	70da      	strb	r2, [r3, #3]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f04f 32ff 	mov.w	r2, #4294967295
 80035d6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80035d8:	6839      	ldr	r1, [r7, #0]
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f7ff f8e0 	bl	80027a0 <move_window>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <check_fs+0x2a>
 80035e6:	2304      	movs	r3, #4
 80035e8:	e038      	b.n	800365c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	3330      	adds	r3, #48	; 0x30
 80035ee:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7fe fe24 	bl	8002240 <ld_word>
 80035f8:	4603      	mov	r3, r0
 80035fa:	461a      	mov	r2, r3
 80035fc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8003600:	429a      	cmp	r2, r3
 8003602:	d001      	beq.n	8003608 <check_fs+0x48>
 8003604:	2303      	movs	r3, #3
 8003606:	e029      	b.n	800365c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800360e:	2be9      	cmp	r3, #233	; 0xe9
 8003610:	d009      	beq.n	8003626 <check_fs+0x66>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003618:	2beb      	cmp	r3, #235	; 0xeb
 800361a:	d11e      	bne.n	800365a <check_fs+0x9a>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003622:	2b90      	cmp	r3, #144	; 0x90
 8003624:	d119      	bne.n	800365a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	3330      	adds	r3, #48	; 0x30
 800362a:	3336      	adds	r3, #54	; 0x36
 800362c:	4618      	mov	r0, r3
 800362e:	f7fe fe1f 	bl	8002270 <ld_dword>
 8003632:	4603      	mov	r3, r0
 8003634:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003638:	4a0a      	ldr	r2, [pc, #40]	; (8003664 <check_fs+0xa4>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d101      	bne.n	8003642 <check_fs+0x82>
 800363e:	2300      	movs	r3, #0
 8003640:	e00c      	b.n	800365c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	3330      	adds	r3, #48	; 0x30
 8003646:	3352      	adds	r3, #82	; 0x52
 8003648:	4618      	mov	r0, r3
 800364a:	f7fe fe11 	bl	8002270 <ld_dword>
 800364e:	4602      	mov	r2, r0
 8003650:	4b05      	ldr	r3, [pc, #20]	; (8003668 <check_fs+0xa8>)
 8003652:	429a      	cmp	r2, r3
 8003654:	d101      	bne.n	800365a <check_fs+0x9a>
 8003656:	2300      	movs	r3, #0
 8003658:	e000      	b.n	800365c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800365a:	2302      	movs	r3, #2
}
 800365c:	4618      	mov	r0, r3
 800365e:	3708      	adds	r7, #8
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	00544146 	.word	0x00544146
 8003668:	33544146 	.word	0x33544146

0800366c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b096      	sub	sp, #88	; 0x58
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	4613      	mov	r3, r2
 8003678:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	2200      	movs	r2, #0
 800367e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8003680:	68f8      	ldr	r0, [r7, #12]
 8003682:	f7ff ff58 	bl	8003536 <get_ldnumber>
 8003686:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8003688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800368a:	2b00      	cmp	r3, #0
 800368c:	da01      	bge.n	8003692 <find_volume+0x26>
 800368e:	230b      	movs	r3, #11
 8003690:	e22e      	b.n	8003af0 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8003692:	4aa8      	ldr	r2, [pc, #672]	; (8003934 <find_volume+0x2c8>)
 8003694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800369a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800369c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <find_volume+0x3a>
 80036a2:	230c      	movs	r3, #12
 80036a4:	e224      	b.n	8003af0 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036aa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80036ac:	79fb      	ldrb	r3, [r7, #7]
 80036ae:	f023 0301 	bic.w	r3, r3, #1
 80036b2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80036b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d01a      	beq.n	80036f2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80036bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036be:	785b      	ldrb	r3, [r3, #1]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7fe fd1f 	bl	8002104 <disk_status>
 80036c6:	4603      	mov	r3, r0
 80036c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80036cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80036d0:	f003 0301 	and.w	r3, r3, #1
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d10c      	bne.n	80036f2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80036d8:	79fb      	ldrb	r3, [r7, #7]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d007      	beq.n	80036ee <find_volume+0x82>
 80036de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80036e2:	f003 0304 	and.w	r3, r3, #4
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80036ea:	230a      	movs	r3, #10
 80036ec:	e200      	b.n	8003af0 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 80036ee:	2300      	movs	r3, #0
 80036f0:	e1fe      	b.n	8003af0 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80036f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f4:	2200      	movs	r2, #0
 80036f6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80036f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036fa:	b2da      	uxtb	r2, r3
 80036fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036fe:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8003700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003702:	785b      	ldrb	r3, [r3, #1]
 8003704:	4618      	mov	r0, r3
 8003706:	f7fe fd17 	bl	8002138 <disk_initialize>
 800370a:	4603      	mov	r3, r0
 800370c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8003710:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003714:	f003 0301 	and.w	r3, r3, #1
 8003718:	2b00      	cmp	r3, #0
 800371a:	d001      	beq.n	8003720 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800371c:	2303      	movs	r3, #3
 800371e:	e1e7      	b.n	8003af0 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8003720:	79fb      	ldrb	r3, [r7, #7]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d007      	beq.n	8003736 <find_volume+0xca>
 8003726:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800372a:	f003 0304 	and.w	r3, r3, #4
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8003732:	230a      	movs	r3, #10
 8003734:	e1dc      	b.n	8003af0 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8003736:	2300      	movs	r3, #0
 8003738:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800373a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800373c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800373e:	f7ff ff3f 	bl	80035c0 <check_fs>
 8003742:	4603      	mov	r3, r0
 8003744:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8003748:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800374c:	2b02      	cmp	r3, #2
 800374e:	d14b      	bne.n	80037e8 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8003750:	2300      	movs	r3, #0
 8003752:	643b      	str	r3, [r7, #64]	; 0x40
 8003754:	e01f      	b.n	8003796 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8003756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003758:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800375c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800375e:	011b      	lsls	r3, r3, #4
 8003760:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8003764:	4413      	add	r3, r2
 8003766:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8003768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800376a:	3304      	adds	r3, #4
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d006      	beq.n	8003780 <find_volume+0x114>
 8003772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003774:	3308      	adds	r3, #8
 8003776:	4618      	mov	r0, r3
 8003778:	f7fe fd7a 	bl	8002270 <ld_dword>
 800377c:	4602      	mov	r2, r0
 800377e:	e000      	b.n	8003782 <find_volume+0x116>
 8003780:	2200      	movs	r2, #0
 8003782:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800378a:	440b      	add	r3, r1
 800378c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8003790:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003792:	3301      	adds	r3, #1
 8003794:	643b      	str	r3, [r7, #64]	; 0x40
 8003796:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003798:	2b03      	cmp	r3, #3
 800379a:	d9dc      	bls.n	8003756 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800379c:	2300      	movs	r3, #0
 800379e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80037a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d002      	beq.n	80037ac <find_volume+0x140>
 80037a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037a8:	3b01      	subs	r3, #1
 80037aa:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80037ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80037b4:	4413      	add	r3, r2
 80037b6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80037ba:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80037bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d005      	beq.n	80037ce <find_volume+0x162>
 80037c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80037c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80037c6:	f7ff fefb 	bl	80035c0 <check_fs>
 80037ca:	4603      	mov	r3, r0
 80037cc:	e000      	b.n	80037d0 <find_volume+0x164>
 80037ce:	2303      	movs	r3, #3
 80037d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80037d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d905      	bls.n	80037e8 <find_volume+0x17c>
 80037dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037de:	3301      	adds	r3, #1
 80037e0:	643b      	str	r3, [r7, #64]	; 0x40
 80037e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037e4:	2b03      	cmp	r3, #3
 80037e6:	d9e1      	bls.n	80037ac <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80037e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80037ec:	2b04      	cmp	r3, #4
 80037ee:	d101      	bne.n	80037f4 <find_volume+0x188>
 80037f0:	2301      	movs	r3, #1
 80037f2:	e17d      	b.n	8003af0 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80037f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d901      	bls.n	8003800 <find_volume+0x194>
 80037fc:	230d      	movs	r3, #13
 80037fe:	e177      	b.n	8003af0 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8003800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003802:	3330      	adds	r3, #48	; 0x30
 8003804:	330b      	adds	r3, #11
 8003806:	4618      	mov	r0, r3
 8003808:	f7fe fd1a 	bl	8002240 <ld_word>
 800380c:	4603      	mov	r3, r0
 800380e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003812:	d001      	beq.n	8003818 <find_volume+0x1ac>
 8003814:	230d      	movs	r3, #13
 8003816:	e16b      	b.n	8003af0 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8003818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800381a:	3330      	adds	r3, #48	; 0x30
 800381c:	3316      	adds	r3, #22
 800381e:	4618      	mov	r0, r3
 8003820:	f7fe fd0e 	bl	8002240 <ld_word>
 8003824:	4603      	mov	r3, r0
 8003826:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8003828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800382a:	2b00      	cmp	r3, #0
 800382c:	d106      	bne.n	800383c <find_volume+0x1d0>
 800382e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003830:	3330      	adds	r3, #48	; 0x30
 8003832:	3324      	adds	r3, #36	; 0x24
 8003834:	4618      	mov	r0, r3
 8003836:	f7fe fd1b 	bl	8002270 <ld_dword>
 800383a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800383c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800383e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003840:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8003842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003844:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8003848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800384a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800384c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800384e:	789b      	ldrb	r3, [r3, #2]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d005      	beq.n	8003860 <find_volume+0x1f4>
 8003854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003856:	789b      	ldrb	r3, [r3, #2]
 8003858:	2b02      	cmp	r3, #2
 800385a:	d001      	beq.n	8003860 <find_volume+0x1f4>
 800385c:	230d      	movs	r3, #13
 800385e:	e147      	b.n	8003af0 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8003860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003862:	789b      	ldrb	r3, [r3, #2]
 8003864:	461a      	mov	r2, r3
 8003866:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003868:	fb02 f303 	mul.w	r3, r2, r3
 800386c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800386e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003874:	b29a      	uxth	r2, r3
 8003876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003878:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800387a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800387c:	895b      	ldrh	r3, [r3, #10]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d008      	beq.n	8003894 <find_volume+0x228>
 8003882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003884:	895b      	ldrh	r3, [r3, #10]
 8003886:	461a      	mov	r2, r3
 8003888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800388a:	895b      	ldrh	r3, [r3, #10]
 800388c:	3b01      	subs	r3, #1
 800388e:	4013      	ands	r3, r2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d001      	beq.n	8003898 <find_volume+0x22c>
 8003894:	230d      	movs	r3, #13
 8003896:	e12b      	b.n	8003af0 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8003898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800389a:	3330      	adds	r3, #48	; 0x30
 800389c:	3311      	adds	r3, #17
 800389e:	4618      	mov	r0, r3
 80038a0:	f7fe fcce 	bl	8002240 <ld_word>
 80038a4:	4603      	mov	r3, r0
 80038a6:	461a      	mov	r2, r3
 80038a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038aa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80038ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ae:	891b      	ldrh	r3, [r3, #8]
 80038b0:	f003 030f 	and.w	r3, r3, #15
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <find_volume+0x252>
 80038ba:	230d      	movs	r3, #13
 80038bc:	e118      	b.n	8003af0 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80038be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038c0:	3330      	adds	r3, #48	; 0x30
 80038c2:	3313      	adds	r3, #19
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7fe fcbb 	bl	8002240 <ld_word>
 80038ca:	4603      	mov	r3, r0
 80038cc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80038ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d106      	bne.n	80038e2 <find_volume+0x276>
 80038d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d6:	3330      	adds	r3, #48	; 0x30
 80038d8:	3320      	adds	r3, #32
 80038da:	4618      	mov	r0, r3
 80038dc:	f7fe fcc8 	bl	8002270 <ld_dword>
 80038e0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80038e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e4:	3330      	adds	r3, #48	; 0x30
 80038e6:	330e      	adds	r3, #14
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7fe fca9 	bl	8002240 <ld_word>
 80038ee:	4603      	mov	r3, r0
 80038f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80038f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d101      	bne.n	80038fc <find_volume+0x290>
 80038f8:	230d      	movs	r3, #13
 80038fa:	e0f9      	b.n	8003af0 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80038fc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80038fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003900:	4413      	add	r3, r2
 8003902:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003904:	8912      	ldrh	r2, [r2, #8]
 8003906:	0912      	lsrs	r2, r2, #4
 8003908:	b292      	uxth	r2, r2
 800390a:	4413      	add	r3, r2
 800390c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800390e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003912:	429a      	cmp	r2, r3
 8003914:	d201      	bcs.n	800391a <find_volume+0x2ae>
 8003916:	230d      	movs	r3, #13
 8003918:	e0ea      	b.n	8003af0 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800391a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800391c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003922:	8952      	ldrh	r2, [r2, #10]
 8003924:	fbb3 f3f2 	udiv	r3, r3, r2
 8003928:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800392a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392c:	2b00      	cmp	r3, #0
 800392e:	d103      	bne.n	8003938 <find_volume+0x2cc>
 8003930:	230d      	movs	r3, #13
 8003932:	e0dd      	b.n	8003af0 <find_volume+0x484>
 8003934:	200000a0 	.word	0x200000a0
		fmt = FS_FAT32;
 8003938:	2303      	movs	r3, #3
 800393a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800393e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003940:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8003944:	4293      	cmp	r3, r2
 8003946:	d802      	bhi.n	800394e <find_volume+0x2e2>
 8003948:	2302      	movs	r3, #2
 800394a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800394e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003950:	f640 72f5 	movw	r2, #4085	; 0xff5
 8003954:	4293      	cmp	r3, r2
 8003956:	d802      	bhi.n	800395e <find_volume+0x2f2>
 8003958:	2301      	movs	r3, #1
 800395a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800395e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003960:	1c9a      	adds	r2, r3, #2
 8003962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003964:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8003966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003968:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800396a:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800396c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800396e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003970:	441a      	add	r2, r3
 8003972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003974:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8003976:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800397a:	441a      	add	r2, r3
 800397c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800397e:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8003980:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003984:	2b03      	cmp	r3, #3
 8003986:	d11e      	bne.n	80039c6 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8003988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800398a:	3330      	adds	r3, #48	; 0x30
 800398c:	332a      	adds	r3, #42	; 0x2a
 800398e:	4618      	mov	r0, r3
 8003990:	f7fe fc56 	bl	8002240 <ld_word>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <find_volume+0x332>
 800399a:	230d      	movs	r3, #13
 800399c:	e0a8      	b.n	8003af0 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800399e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039a0:	891b      	ldrh	r3, [r3, #8]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <find_volume+0x33e>
 80039a6:	230d      	movs	r3, #13
 80039a8:	e0a2      	b.n	8003af0 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80039aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ac:	3330      	adds	r3, #48	; 0x30
 80039ae:	332c      	adds	r3, #44	; 0x2c
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7fe fc5d 	bl	8002270 <ld_dword>
 80039b6:	4602      	mov	r2, r0
 80039b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ba:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80039bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039be:	695b      	ldr	r3, [r3, #20]
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	647b      	str	r3, [r7, #68]	; 0x44
 80039c4:	e01f      	b.n	8003a06 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80039c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c8:	891b      	ldrh	r3, [r3, #8]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <find_volume+0x366>
 80039ce:	230d      	movs	r3, #13
 80039d0:	e08e      	b.n	8003af0 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80039d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d4:	6a1a      	ldr	r2, [r3, #32]
 80039d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039d8:	441a      	add	r2, r3
 80039da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039dc:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80039de:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d103      	bne.n	80039ee <find_volume+0x382>
 80039e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	005b      	lsls	r3, r3, #1
 80039ec:	e00a      	b.n	8003a04 <find_volume+0x398>
 80039ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f0:	695a      	ldr	r2, [r3, #20]
 80039f2:	4613      	mov	r3, r2
 80039f4:	005b      	lsls	r3, r3, #1
 80039f6:	4413      	add	r3, r2
 80039f8:	085a      	lsrs	r2, r3, #1
 80039fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8003a04:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8003a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a08:	699a      	ldr	r2, [r3, #24]
 8003a0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a0c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003a10:	0a5b      	lsrs	r3, r3, #9
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d201      	bcs.n	8003a1a <find_volume+0x3ae>
 8003a16:	230d      	movs	r3, #13
 8003a18:	e06a      	b.n	8003af0 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8003a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a20:	611a      	str	r2, [r3, #16]
 8003a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a24:	691a      	ldr	r2, [r3, #16]
 8003a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a28:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8003a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a2c:	2280      	movs	r2, #128	; 0x80
 8003a2e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8003a30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003a34:	2b03      	cmp	r3, #3
 8003a36:	d149      	bne.n	8003acc <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8003a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a3a:	3330      	adds	r3, #48	; 0x30
 8003a3c:	3330      	adds	r3, #48	; 0x30
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7fe fbfe 	bl	8002240 <ld_word>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d140      	bne.n	8003acc <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8003a4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	4619      	mov	r1, r3
 8003a50:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003a52:	f7fe fea5 	bl	80027a0 <move_window>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d137      	bne.n	8003acc <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8003a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a5e:	2200      	movs	r2, #0
 8003a60:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8003a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a64:	3330      	adds	r3, #48	; 0x30
 8003a66:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fe fbe8 	bl	8002240 <ld_word>
 8003a70:	4603      	mov	r3, r0
 8003a72:	461a      	mov	r2, r3
 8003a74:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d127      	bne.n	8003acc <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8003a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a7e:	3330      	adds	r3, #48	; 0x30
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7fe fbf5 	bl	8002270 <ld_dword>
 8003a86:	4602      	mov	r2, r0
 8003a88:	4b1b      	ldr	r3, [pc, #108]	; (8003af8 <find_volume+0x48c>)
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d11e      	bne.n	8003acc <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8003a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a90:	3330      	adds	r3, #48	; 0x30
 8003a92:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7fe fbea 	bl	8002270 <ld_dword>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	4b17      	ldr	r3, [pc, #92]	; (8003afc <find_volume+0x490>)
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d113      	bne.n	8003acc <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8003aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aa6:	3330      	adds	r3, #48	; 0x30
 8003aa8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7fe fbdf 	bl	8002270 <ld_dword>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab6:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8003ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aba:	3330      	adds	r3, #48	; 0x30
 8003abc:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7fe fbd5 	bl	8002270 <ld_dword>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aca:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8003acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ace:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8003ad2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8003ad4:	4b0a      	ldr	r3, [pc, #40]	; (8003b00 <find_volume+0x494>)
 8003ad6:	881b      	ldrh	r3, [r3, #0]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	4b08      	ldr	r3, [pc, #32]	; (8003b00 <find_volume+0x494>)
 8003ade:	801a      	strh	r2, [r3, #0]
 8003ae0:	4b07      	ldr	r3, [pc, #28]	; (8003b00 <find_volume+0x494>)
 8003ae2:	881a      	ldrh	r2, [r3, #0]
 8003ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae6:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8003ae8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003aea:	f7fe fdf1 	bl	80026d0 <clear_lock>
#endif
	return FR_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3758      	adds	r7, #88	; 0x58
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	41615252 	.word	0x41615252
 8003afc:	61417272 	.word	0x61417272
 8003b00:	200000a4 	.word	0x200000a4

08003b04 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8003b0e:	2309      	movs	r3, #9
 8003b10:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d01c      	beq.n	8003b52 <validate+0x4e>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d018      	beq.n	8003b52 <validate+0x4e>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d013      	beq.n	8003b52 <validate+0x4e>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	889a      	ldrh	r2, [r3, #4]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	88db      	ldrh	r3, [r3, #6]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d10c      	bne.n	8003b52 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	785b      	ldrb	r3, [r3, #1]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7fe fae0 	bl	8002104 <disk_status>
 8003b44:	4603      	mov	r3, r0
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <validate+0x4e>
			res = FR_OK;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8003b52:	7bfb      	ldrb	r3, [r7, #15]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d102      	bne.n	8003b5e <validate+0x5a>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	e000      	b.n	8003b60 <validate+0x5c>
 8003b5e:	2300      	movs	r3, #0
 8003b60:	683a      	ldr	r2, [r7, #0]
 8003b62:	6013      	str	r3, [r2, #0]
	return res;
 8003b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
	...

08003b70 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b088      	sub	sp, #32
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8003b82:	f107 0310 	add.w	r3, r7, #16
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7ff fcd5 	bl	8003536 <get_ldnumber>
 8003b8c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	da01      	bge.n	8003b98 <f_mount+0x28>
 8003b94:	230b      	movs	r3, #11
 8003b96:	e02b      	b.n	8003bf0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8003b98:	4a17      	ldr	r2, [pc, #92]	; (8003bf8 <f_mount+0x88>)
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ba0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d005      	beq.n	8003bb4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8003ba8:	69b8      	ldr	r0, [r7, #24]
 8003baa:	f7fe fd91 	bl	80026d0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d002      	beq.n	8003bc0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	490d      	ldr	r1, [pc, #52]	; (8003bf8 <f_mount+0x88>)
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d002      	beq.n	8003bd6 <f_mount+0x66>
 8003bd0:	79fb      	ldrb	r3, [r7, #7]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d001      	beq.n	8003bda <f_mount+0x6a>
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	e00a      	b.n	8003bf0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8003bda:	f107 010c 	add.w	r1, r7, #12
 8003bde:	f107 0308 	add.w	r3, r7, #8
 8003be2:	2200      	movs	r2, #0
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7ff fd41 	bl	800366c <find_volume>
 8003bea:	4603      	mov	r3, r0
 8003bec:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8003bee:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3720      	adds	r7, #32
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	200000a0 	.word	0x200000a0

08003bfc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b098      	sub	sp, #96	; 0x60
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	4613      	mov	r3, r2
 8003c08:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d101      	bne.n	8003c14 <f_open+0x18>
 8003c10:	2309      	movs	r3, #9
 8003c12:	e1ad      	b.n	8003f70 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8003c14:	79fb      	ldrb	r3, [r7, #7]
 8003c16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c1a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8003c1c:	79fa      	ldrb	r2, [r7, #7]
 8003c1e:	f107 0110 	add.w	r1, r7, #16
 8003c22:	f107 0308 	add.w	r3, r7, #8
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7ff fd20 	bl	800366c <find_volume>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8003c32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	f040 8191 	bne.w	8003f5e <f_open+0x362>
		dj.obj.fs = fs;
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8003c40:	68ba      	ldr	r2, [r7, #8]
 8003c42:	f107 0314 	add.w	r3, r7, #20
 8003c46:	4611      	mov	r1, r2
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f7ff fc03 	bl	8003454 <follow_path>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8003c54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d11a      	bne.n	8003c92 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8003c5c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003c60:	b25b      	sxtb	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	da03      	bge.n	8003c6e <f_open+0x72>
				res = FR_INVALID_NAME;
 8003c66:	2306      	movs	r3, #6
 8003c68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003c6c:	e011      	b.n	8003c92 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8003c6e:	79fb      	ldrb	r3, [r7, #7]
 8003c70:	f023 0301 	bic.w	r3, r3, #1
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	bf14      	ite	ne
 8003c78:	2301      	movne	r3, #1
 8003c7a:	2300      	moveq	r3, #0
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	461a      	mov	r2, r3
 8003c80:	f107 0314 	add.w	r3, r7, #20
 8003c84:	4611      	mov	r1, r2
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7fe fbda 	bl	8002440 <chk_lock>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8003c92:	79fb      	ldrb	r3, [r7, #7]
 8003c94:	f003 031c 	and.w	r3, r3, #28
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d07f      	beq.n	8003d9c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8003c9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d017      	beq.n	8003cd4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8003ca4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003ca8:	2b04      	cmp	r3, #4
 8003caa:	d10e      	bne.n	8003cca <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8003cac:	f7fe fc24 	bl	80024f8 <enq_lock>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d006      	beq.n	8003cc4 <f_open+0xc8>
 8003cb6:	f107 0314 	add.w	r3, r7, #20
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7ff fb03 	bl	80032c6 <dir_register>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	e000      	b.n	8003cc6 <f_open+0xca>
 8003cc4:	2312      	movs	r3, #18
 8003cc6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8003cca:	79fb      	ldrb	r3, [r7, #7]
 8003ccc:	f043 0308 	orr.w	r3, r3, #8
 8003cd0:	71fb      	strb	r3, [r7, #7]
 8003cd2:	e010      	b.n	8003cf6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8003cd4:	7ebb      	ldrb	r3, [r7, #26]
 8003cd6:	f003 0311 	and.w	r3, r3, #17
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d003      	beq.n	8003ce6 <f_open+0xea>
					res = FR_DENIED;
 8003cde:	2307      	movs	r3, #7
 8003ce0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003ce4:	e007      	b.n	8003cf6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8003ce6:	79fb      	ldrb	r3, [r7, #7]
 8003ce8:	f003 0304 	and.w	r3, r3, #4
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d002      	beq.n	8003cf6 <f_open+0xfa>
 8003cf0:	2308      	movs	r3, #8
 8003cf2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8003cf6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d168      	bne.n	8003dd0 <f_open+0x1d4>
 8003cfe:	79fb      	ldrb	r3, [r7, #7]
 8003d00:	f003 0308 	and.w	r3, r3, #8
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d063      	beq.n	8003dd0 <f_open+0x1d4>
				dw = GET_FATTIME();
 8003d08:	f7fe f95a 	bl	8001fc0 <get_fattime>
 8003d0c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8003d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d10:	330e      	adds	r3, #14
 8003d12:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7fe fae9 	bl	80022ec <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8003d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d1c:	3316      	adds	r3, #22
 8003d1e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7fe fae3 	bl	80022ec <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8003d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d28:	330b      	adds	r3, #11
 8003d2a:	2220      	movs	r2, #32
 8003d2c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d32:	4611      	mov	r1, r2
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7ff fa32 	bl	800319e <ld_clust>
 8003d3a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003d40:	2200      	movs	r2, #0
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7ff fa4a 	bl	80031dc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8003d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d4a:	331c      	adds	r3, #28
 8003d4c:	2100      	movs	r1, #0
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7fe facc 	bl	80022ec <st_dword>
					fs->wflag = 1;
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	2201      	movs	r2, #1
 8003d58:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8003d5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d037      	beq.n	8003dd0 <f_open+0x1d4>
						dw = fs->winsect;
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d64:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8003d66:	f107 0314 	add.w	r3, r7, #20
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7fe ff5d 	bl	8002c2e <remove_chain>
 8003d74:	4603      	mov	r3, r0
 8003d76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8003d7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d126      	bne.n	8003dd0 <f_open+0x1d4>
							res = move_window(fs, dw);
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7fe fd0a 	bl	80027a0 <move_window>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d96:	3a01      	subs	r2, #1
 8003d98:	60da      	str	r2, [r3, #12]
 8003d9a:	e019      	b.n	8003dd0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8003d9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d115      	bne.n	8003dd0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8003da4:	7ebb      	ldrb	r3, [r7, #26]
 8003da6:	f003 0310 	and.w	r3, r3, #16
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d003      	beq.n	8003db6 <f_open+0x1ba>
					res = FR_NO_FILE;
 8003dae:	2304      	movs	r3, #4
 8003db0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003db4:	e00c      	b.n	8003dd0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8003db6:	79fb      	ldrb	r3, [r7, #7]
 8003db8:	f003 0302 	and.w	r3, r3, #2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d007      	beq.n	8003dd0 <f_open+0x1d4>
 8003dc0:	7ebb      	ldrb	r3, [r7, #26]
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d002      	beq.n	8003dd0 <f_open+0x1d4>
						res = FR_DENIED;
 8003dca:	2307      	movs	r3, #7
 8003dcc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8003dd0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d128      	bne.n	8003e2a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8003dd8:	79fb      	ldrb	r3, [r7, #7]
 8003dda:	f003 0308 	and.w	r3, r3, #8
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d003      	beq.n	8003dea <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8003de2:	79fb      	ldrb	r3, [r7, #7]
 8003de4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003de8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8003df2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8003df8:	79fb      	ldrb	r3, [r7, #7]
 8003dfa:	f023 0301 	bic.w	r3, r3, #1
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	bf14      	ite	ne
 8003e02:	2301      	movne	r3, #1
 8003e04:	2300      	moveq	r3, #0
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	461a      	mov	r2, r3
 8003e0a:	f107 0314 	add.w	r3, r7, #20
 8003e0e:	4611      	mov	r1, r2
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7fe fb93 	bl	800253c <inc_lock>
 8003e16:	4602      	mov	r2, r0
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d102      	bne.n	8003e2a <f_open+0x22e>
 8003e24:	2302      	movs	r3, #2
 8003e26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8003e2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f040 8095 	bne.w	8003f5e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e38:	4611      	mov	r1, r2
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7ff f9af 	bl	800319e <ld_clust>
 8003e40:	4602      	mov	r2, r0
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8003e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e48:	331c      	adds	r3, #28
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7fe fa10 	bl	8002270 <ld_dword>
 8003e50:	4602      	mov	r2, r0
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	88da      	ldrh	r2, [r3, #6]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	79fa      	ldrb	r2, [r7, #7]
 8003e6e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	3330      	adds	r3, #48	; 0x30
 8003e86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7fe fa7a 	bl	8002386 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8003e92:	79fb      	ldrb	r3, [r7, #7]
 8003e94:	f003 0320 	and.w	r3, r3, #32
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d060      	beq.n	8003f5e <f_open+0x362>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d05c      	beq.n	8003f5e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	68da      	ldr	r2, [r3, #12]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	895b      	ldrh	r3, [r3, #10]
 8003eb0:	025b      	lsls	r3, r3, #9
 8003eb2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	657b      	str	r3, [r7, #84]	; 0x54
 8003ec0:	e016      	b.n	8003ef0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7fe fd25 	bl	8002916 <get_fat>
 8003ecc:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8003ece:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d802      	bhi.n	8003eda <f_open+0x2de>
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8003eda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee0:	d102      	bne.n	8003ee8 <f_open+0x2ec>
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8003ee8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003eea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	657b      	str	r3, [r7, #84]	; 0x54
 8003ef0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d103      	bne.n	8003f00 <f_open+0x304>
 8003ef8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003efa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d8e0      	bhi.n	8003ec2 <f_open+0x2c6>
				}
				fp->clust = clst;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f04:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8003f06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d127      	bne.n	8003f5e <f_open+0x362>
 8003f0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d022      	beq.n	8003f5e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f7fe fcdb 	bl	80028d8 <clust2sect>
 8003f22:	6478      	str	r0, [r7, #68]	; 0x44
 8003f24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d103      	bne.n	8003f32 <f_open+0x336>
						res = FR_INT_ERR;
 8003f2a:	2302      	movs	r3, #2
 8003f2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003f30:	e015      	b.n	8003f5e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8003f32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f34:	0a5a      	lsrs	r2, r3, #9
 8003f36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f38:	441a      	add	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	7858      	ldrb	r0, [r3, #1]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6a1a      	ldr	r2, [r3, #32]
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	f7fe f919 	bl	8002184 <disk_read>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d002      	beq.n	8003f5e <f_open+0x362>
 8003f58:	2301      	movs	r3, #1
 8003f5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8003f5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d002      	beq.n	8003f6c <f_open+0x370>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8003f6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3760      	adds	r7, #96	; 0x60
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b08e      	sub	sp, #56	; 0x38
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
 8003f84:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f107 0214 	add.w	r2, r7, #20
 8003f96:	4611      	mov	r1, r2
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7ff fdb3 	bl	8003b04 <validate>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8003fa4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d107      	bne.n	8003fbc <f_read+0x44>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	7d5b      	ldrb	r3, [r3, #21]
 8003fb0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003fb4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d002      	beq.n	8003fc2 <f_read+0x4a>
 8003fbc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003fc0:	e115      	b.n	80041ee <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	7d1b      	ldrb	r3, [r3, #20]
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d101      	bne.n	8003fd2 <f_read+0x5a>
 8003fce:	2307      	movs	r3, #7
 8003fd0:	e10d      	b.n	80041ee <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	68da      	ldr	r2, [r3, #12]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	6a3b      	ldr	r3, [r7, #32]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	f240 80fe 	bls.w	80041e4 <f_read+0x26c>
 8003fe8:	6a3b      	ldr	r3, [r7, #32]
 8003fea:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8003fec:	e0fa      	b.n	80041e4 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f040 80c6 	bne.w	8004188 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	0a5b      	lsrs	r3, r3, #9
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	8952      	ldrh	r2, [r2, #10]
 8004006:	3a01      	subs	r2, #1
 8004008:	4013      	ands	r3, r2
 800400a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d12f      	bne.n	8004072 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d103      	bne.n	8004022 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	633b      	str	r3, [r7, #48]	; 0x30
 8004020:	e013      	b.n	800404a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004026:	2b00      	cmp	r3, #0
 8004028:	d007      	beq.n	800403a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	4619      	mov	r1, r3
 8004030:	68f8      	ldr	r0, [r7, #12]
 8004032:	f7fe fef9 	bl	8002e28 <clmt_clust>
 8004036:	6338      	str	r0, [r7, #48]	; 0x30
 8004038:	e007      	b.n	800404a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	69db      	ldr	r3, [r3, #28]
 8004040:	4619      	mov	r1, r3
 8004042:	4610      	mov	r0, r2
 8004044:	f7fe fc67 	bl	8002916 <get_fat>
 8004048:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800404a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800404c:	2b01      	cmp	r3, #1
 800404e:	d804      	bhi.n	800405a <f_read+0xe2>
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2202      	movs	r2, #2
 8004054:	755a      	strb	r2, [r3, #21]
 8004056:	2302      	movs	r3, #2
 8004058:	e0c9      	b.n	80041ee <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800405a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800405c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004060:	d104      	bne.n	800406c <f_read+0xf4>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2201      	movs	r2, #1
 8004066:	755a      	strb	r2, [r3, #21]
 8004068:	2301      	movs	r3, #1
 800406a:	e0c0      	b.n	80041ee <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004070:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	69db      	ldr	r3, [r3, #28]
 8004078:	4619      	mov	r1, r3
 800407a:	4610      	mov	r0, r2
 800407c:	f7fe fc2c 	bl	80028d8 <clust2sect>
 8004080:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d104      	bne.n	8004092 <f_read+0x11a>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2202      	movs	r2, #2
 800408c:	755a      	strb	r2, [r3, #21]
 800408e:	2302      	movs	r3, #2
 8004090:	e0ad      	b.n	80041ee <f_read+0x276>
			sect += csect;
 8004092:	69ba      	ldr	r2, [r7, #24]
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	4413      	add	r3, r2
 8004098:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	0a5b      	lsrs	r3, r3, #9
 800409e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80040a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d039      	beq.n	800411a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80040a6:	69fa      	ldr	r2, [r7, #28]
 80040a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040aa:	4413      	add	r3, r2
 80040ac:	697a      	ldr	r2, [r7, #20]
 80040ae:	8952      	ldrh	r2, [r2, #10]
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d905      	bls.n	80040c0 <f_read+0x148>
					cc = fs->csize - csect;
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	895b      	ldrh	r3, [r3, #10]
 80040b8:	461a      	mov	r2, r3
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	7858      	ldrb	r0, [r3, #1]
 80040c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c6:	69ba      	ldr	r2, [r7, #24]
 80040c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040ca:	f7fe f85b 	bl	8002184 <disk_read>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d004      	beq.n	80040de <f_read+0x166>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2201      	movs	r2, #1
 80040d8:	755a      	strb	r2, [r3, #21]
 80040da:	2301      	movs	r3, #1
 80040dc:	e087      	b.n	80041ee <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	7d1b      	ldrb	r3, [r3, #20]
 80040e2:	b25b      	sxtb	r3, r3
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	da14      	bge.n	8004112 <f_read+0x19a>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6a1a      	ldr	r2, [r3, #32]
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d90d      	bls.n	8004112 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6a1a      	ldr	r2, [r3, #32]
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	025b      	lsls	r3, r3, #9
 8004100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004102:	18d0      	adds	r0, r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	3330      	adds	r3, #48	; 0x30
 8004108:	f44f 7200 	mov.w	r2, #512	; 0x200
 800410c:	4619      	mov	r1, r3
 800410e:	f7fe f919 	bl	8002344 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8004112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004114:	025b      	lsls	r3, r3, #9
 8004116:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8004118:	e050      	b.n	80041bc <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	69ba      	ldr	r2, [r7, #24]
 8004120:	429a      	cmp	r2, r3
 8004122:	d02e      	beq.n	8004182 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	7d1b      	ldrb	r3, [r3, #20]
 8004128:	b25b      	sxtb	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	da18      	bge.n	8004160 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	7858      	ldrb	r0, [r3, #1]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6a1a      	ldr	r2, [r3, #32]
 800413c:	2301      	movs	r3, #1
 800413e:	f7fe f841 	bl	80021c4 <disk_write>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d004      	beq.n	8004152 <f_read+0x1da>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2201      	movs	r2, #1
 800414c:	755a      	strb	r2, [r3, #21]
 800414e:	2301      	movs	r3, #1
 8004150:	e04d      	b.n	80041ee <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	7d1b      	ldrb	r3, [r3, #20]
 8004156:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800415a:	b2da      	uxtb	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	7858      	ldrb	r0, [r3, #1]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800416a:	2301      	movs	r3, #1
 800416c:	69ba      	ldr	r2, [r7, #24]
 800416e:	f7fe f809 	bl	8002184 <disk_read>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d004      	beq.n	8004182 <f_read+0x20a>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2201      	movs	r2, #1
 800417c:	755a      	strb	r2, [r3, #21]
 800417e:	2301      	movs	r3, #1
 8004180:	e035      	b.n	80041ee <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004190:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8004194:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8004196:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	429a      	cmp	r2, r3
 800419c:	d901      	bls.n	80041a2 <f_read+0x22a>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041b0:	4413      	add	r3, r2
 80041b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041b4:	4619      	mov	r1, r3
 80041b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041b8:	f7fe f8c4 	bl	8002344 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80041bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041c0:	4413      	add	r3, r2
 80041c2:	627b      	str	r3, [r7, #36]	; 0x24
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	699a      	ldr	r2, [r3, #24]
 80041c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ca:	441a      	add	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	619a      	str	r2, [r3, #24]
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d6:	441a      	add	r2, r3
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	601a      	str	r2, [r3, #0]
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	f47f af01 	bne.w	8003fee <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3738      	adds	r7, #56	; 0x38
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b08c      	sub	sp, #48	; 0x30
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	60f8      	str	r0, [r7, #12]
 80041fe:	60b9      	str	r1, [r7, #8]
 8004200:	607a      	str	r2, [r7, #4]
 8004202:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	2200      	movs	r2, #0
 800420c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f107 0210 	add.w	r2, r7, #16
 8004214:	4611      	mov	r1, r2
 8004216:	4618      	mov	r0, r3
 8004218:	f7ff fc74 	bl	8003b04 <validate>
 800421c:	4603      	mov	r3, r0
 800421e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8004222:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004226:	2b00      	cmp	r3, #0
 8004228:	d107      	bne.n	800423a <f_write+0x44>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	7d5b      	ldrb	r3, [r3, #21]
 800422e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004232:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004236:	2b00      	cmp	r3, #0
 8004238:	d002      	beq.n	8004240 <f_write+0x4a>
 800423a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800423e:	e14b      	b.n	80044d8 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	7d1b      	ldrb	r3, [r3, #20]
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d101      	bne.n	8004250 <f_write+0x5a>
 800424c:	2307      	movs	r3, #7
 800424e:	e143      	b.n	80044d8 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	699a      	ldr	r2, [r3, #24]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	441a      	add	r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	699b      	ldr	r3, [r3, #24]
 800425c:	429a      	cmp	r2, r3
 800425e:	f080 812d 	bcs.w	80044bc <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	43db      	mvns	r3, r3
 8004268:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800426a:	e127      	b.n	80044bc <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	699b      	ldr	r3, [r3, #24]
 8004270:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004274:	2b00      	cmp	r3, #0
 8004276:	f040 80e3 	bne.w	8004440 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	0a5b      	lsrs	r3, r3, #9
 8004280:	693a      	ldr	r2, [r7, #16]
 8004282:	8952      	ldrh	r2, [r2, #10]
 8004284:	3a01      	subs	r2, #1
 8004286:	4013      	ands	r3, r2
 8004288:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d143      	bne.n	8004318 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d10c      	bne.n	80042b2 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800429e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d11a      	bne.n	80042da <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2100      	movs	r1, #0
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7fe fd25 	bl	8002cf8 <create_chain>
 80042ae:	62b8      	str	r0, [r7, #40]	; 0x28
 80042b0:	e013      	b.n	80042da <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d007      	beq.n	80042ca <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	4619      	mov	r1, r3
 80042c0:	68f8      	ldr	r0, [r7, #12]
 80042c2:	f7fe fdb1 	bl	8002e28 <clmt_clust>
 80042c6:	62b8      	str	r0, [r7, #40]	; 0x28
 80042c8:	e007      	b.n	80042da <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	69db      	ldr	r3, [r3, #28]
 80042d0:	4619      	mov	r1, r3
 80042d2:	4610      	mov	r0, r2
 80042d4:	f7fe fd10 	bl	8002cf8 <create_chain>
 80042d8:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80042da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f000 80f2 	beq.w	80044c6 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80042e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d104      	bne.n	80042f2 <f_write+0xfc>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2202      	movs	r2, #2
 80042ec:	755a      	strb	r2, [r3, #21]
 80042ee:	2302      	movs	r3, #2
 80042f0:	e0f2      	b.n	80044d8 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80042f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042f8:	d104      	bne.n	8004304 <f_write+0x10e>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2201      	movs	r2, #1
 80042fe:	755a      	strb	r2, [r3, #21]
 8004300:	2301      	movs	r3, #1
 8004302:	e0e9      	b.n	80044d8 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004308:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d102      	bne.n	8004318 <f_write+0x122>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004316:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	7d1b      	ldrb	r3, [r3, #20]
 800431c:	b25b      	sxtb	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	da18      	bge.n	8004354 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	7858      	ldrb	r0, [r3, #1]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6a1a      	ldr	r2, [r3, #32]
 8004330:	2301      	movs	r3, #1
 8004332:	f7fd ff47 	bl	80021c4 <disk_write>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d004      	beq.n	8004346 <f_write+0x150>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2201      	movs	r2, #1
 8004340:	755a      	strb	r2, [r3, #21]
 8004342:	2301      	movs	r3, #1
 8004344:	e0c8      	b.n	80044d8 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	7d1b      	ldrb	r3, [r3, #20]
 800434a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800434e:	b2da      	uxtb	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	69db      	ldr	r3, [r3, #28]
 800435a:	4619      	mov	r1, r3
 800435c:	4610      	mov	r0, r2
 800435e:	f7fe fabb 	bl	80028d8 <clust2sect>
 8004362:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d104      	bne.n	8004374 <f_write+0x17e>
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2202      	movs	r2, #2
 800436e:	755a      	strb	r2, [r3, #21]
 8004370:	2302      	movs	r3, #2
 8004372:	e0b1      	b.n	80044d8 <f_write+0x2e2>
			sect += csect;
 8004374:	697a      	ldr	r2, [r7, #20]
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	4413      	add	r3, r2
 800437a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	0a5b      	lsrs	r3, r3, #9
 8004380:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8004382:	6a3b      	ldr	r3, [r7, #32]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d03c      	beq.n	8004402 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8004388:	69ba      	ldr	r2, [r7, #24]
 800438a:	6a3b      	ldr	r3, [r7, #32]
 800438c:	4413      	add	r3, r2
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	8952      	ldrh	r2, [r2, #10]
 8004392:	4293      	cmp	r3, r2
 8004394:	d905      	bls.n	80043a2 <f_write+0x1ac>
					cc = fs->csize - csect;
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	895b      	ldrh	r3, [r3, #10]
 800439a:	461a      	mov	r2, r3
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	7858      	ldrb	r0, [r3, #1]
 80043a6:	6a3b      	ldr	r3, [r7, #32]
 80043a8:	697a      	ldr	r2, [r7, #20]
 80043aa:	69f9      	ldr	r1, [r7, #28]
 80043ac:	f7fd ff0a 	bl	80021c4 <disk_write>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d004      	beq.n	80043c0 <f_write+0x1ca>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2201      	movs	r2, #1
 80043ba:	755a      	strb	r2, [r3, #21]
 80043bc:	2301      	movs	r3, #1
 80043be:	e08b      	b.n	80044d8 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6a1a      	ldr	r2, [r3, #32]
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	6a3a      	ldr	r2, [r7, #32]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d915      	bls.n	80043fa <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6a1a      	ldr	r2, [r3, #32]
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	025b      	lsls	r3, r3, #9
 80043de:	69fa      	ldr	r2, [r7, #28]
 80043e0:	4413      	add	r3, r2
 80043e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043e6:	4619      	mov	r1, r3
 80043e8:	f7fd ffac 	bl	8002344 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	7d1b      	ldrb	r3, [r3, #20]
 80043f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043f4:	b2da      	uxtb	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80043fa:	6a3b      	ldr	r3, [r7, #32]
 80043fc:	025b      	lsls	r3, r3, #9
 80043fe:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8004400:	e03f      	b.n	8004482 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6a1b      	ldr	r3, [r3, #32]
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	429a      	cmp	r2, r3
 800440a:	d016      	beq.n	800443a <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	699a      	ldr	r2, [r3, #24]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8004414:	429a      	cmp	r2, r3
 8004416:	d210      	bcs.n	800443a <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	7858      	ldrb	r0, [r3, #1]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004422:	2301      	movs	r3, #1
 8004424:	697a      	ldr	r2, [r7, #20]
 8004426:	f7fd fead 	bl	8002184 <disk_read>
 800442a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800442c:	2b00      	cmp	r3, #0
 800442e:	d004      	beq.n	800443a <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2201      	movs	r2, #1
 8004434:	755a      	strb	r2, [r3, #21]
 8004436:	2301      	movs	r3, #1
 8004438:	e04e      	b.n	80044d8 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	697a      	ldr	r2, [r7, #20]
 800443e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004448:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800444c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800444e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	429a      	cmp	r2, r3
 8004454:	d901      	bls.n	800445a <f_write+0x264>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	699b      	ldr	r3, [r3, #24]
 8004464:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004468:	4413      	add	r3, r2
 800446a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800446c:	69f9      	ldr	r1, [r7, #28]
 800446e:	4618      	mov	r0, r3
 8004470:	f7fd ff68 	bl	8002344 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	7d1b      	ldrb	r3, [r3, #20]
 8004478:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800447c:	b2da      	uxtb	r2, r3
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8004482:	69fa      	ldr	r2, [r7, #28]
 8004484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004486:	4413      	add	r3, r2
 8004488:	61fb      	str	r3, [r7, #28]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	699a      	ldr	r2, [r3, #24]
 800448e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004490:	441a      	add	r2, r3
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	619a      	str	r2, [r3, #24]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	68da      	ldr	r2, [r3, #12]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	429a      	cmp	r2, r3
 80044a0:	bf38      	it	cc
 80044a2:	461a      	movcc	r2, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	60da      	str	r2, [r3, #12]
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ae:	441a      	add	r2, r3
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	601a      	str	r2, [r3, #0]
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	f47f aed4 	bne.w	800426c <f_write+0x76>
 80044c4:	e000      	b.n	80044c8 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80044c6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	7d1b      	ldrb	r3, [r3, #20]
 80044cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044d0:	b2da      	uxtb	r2, r3
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3730      	adds	r7, #48	; 0x30
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b086      	sub	sp, #24
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f107 0208 	add.w	r2, r7, #8
 80044ee:	4611      	mov	r1, r2
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7ff fb07 	bl	8003b04 <validate>
 80044f6:	4603      	mov	r3, r0
 80044f8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80044fa:	7dfb      	ldrb	r3, [r7, #23]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d168      	bne.n	80045d2 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	7d1b      	ldrb	r3, [r3, #20]
 8004504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004508:	2b00      	cmp	r3, #0
 800450a:	d062      	beq.n	80045d2 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	7d1b      	ldrb	r3, [r3, #20]
 8004510:	b25b      	sxtb	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	da15      	bge.n	8004542 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	7858      	ldrb	r0, [r3, #1]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a1a      	ldr	r2, [r3, #32]
 8004524:	2301      	movs	r3, #1
 8004526:	f7fd fe4d 	bl	80021c4 <disk_write>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d001      	beq.n	8004534 <f_sync+0x54>
 8004530:	2301      	movs	r3, #1
 8004532:	e04f      	b.n	80045d4 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	7d1b      	ldrb	r3, [r3, #20]
 8004538:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800453c:	b2da      	uxtb	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8004542:	f7fd fd3d 	bl	8001fc0 <get_fattime>
 8004546:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8004548:	68ba      	ldr	r2, [r7, #8]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454e:	4619      	mov	r1, r3
 8004550:	4610      	mov	r0, r2
 8004552:	f7fe f925 	bl	80027a0 <move_window>
 8004556:	4603      	mov	r3, r0
 8004558:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800455a:	7dfb      	ldrb	r3, [r7, #23]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d138      	bne.n	80045d2 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004564:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	330b      	adds	r3, #11
 800456a:	781a      	ldrb	r2, [r3, #0]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	330b      	adds	r3, #11
 8004570:	f042 0220 	orr.w	r2, r2, #32
 8004574:	b2d2      	uxtb	r2, r2
 8004576:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6818      	ldr	r0, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	461a      	mov	r2, r3
 8004582:	68f9      	ldr	r1, [r7, #12]
 8004584:	f7fe fe2a 	bl	80031dc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f103 021c 	add.w	r2, r3, #28
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	4619      	mov	r1, r3
 8004594:	4610      	mov	r0, r2
 8004596:	f7fd fea9 	bl	80022ec <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	3316      	adds	r3, #22
 800459e:	6939      	ldr	r1, [r7, #16]
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7fd fea3 	bl	80022ec <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	3312      	adds	r3, #18
 80045aa:	2100      	movs	r1, #0
 80045ac:	4618      	mov	r0, r3
 80045ae:	f7fd fe82 	bl	80022b6 <st_word>
					fs->wflag = 1;
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	2201      	movs	r2, #1
 80045b6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7fe f91e 	bl	80027fc <sync_fs>
 80045c0:	4603      	mov	r3, r0
 80045c2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	7d1b      	ldrb	r3, [r3, #20]
 80045c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045cc:	b2da      	uxtb	r2, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80045d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3718      	adds	r7, #24
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f7ff ff7b 	bl	80044e0 <f_sync>
 80045ea:	4603      	mov	r3, r0
 80045ec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80045ee:	7bfb      	ldrb	r3, [r7, #15]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d118      	bne.n	8004626 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f107 0208 	add.w	r2, r7, #8
 80045fa:	4611      	mov	r1, r2
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7ff fa81 	bl	8003b04 <validate>
 8004602:	4603      	mov	r3, r0
 8004604:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8004606:	7bfb      	ldrb	r3, [r7, #15]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d10c      	bne.n	8004626 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	4618      	mov	r0, r3
 8004612:	f7fe f821 	bl	8002658 <dec_lock>
 8004616:	4603      	mov	r3, r0
 8004618:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800461a:	7bfb      	ldrb	r3, [r7, #15]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d102      	bne.n	8004626 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8004626:	7bfb      	ldrb	r3, [r7, #15]
}
 8004628:	4618      	mov	r0, r3
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8004630:	b480      	push	{r7}
 8004632:	b087      	sub	sp, #28
 8004634:	af00      	add	r7, sp, #0
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	4613      	mov	r3, r2
 800463c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800463e:	2301      	movs	r3, #1
 8004640:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8004642:	2300      	movs	r3, #0
 8004644:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8004646:	4b1f      	ldr	r3, [pc, #124]	; (80046c4 <FATFS_LinkDriverEx+0x94>)
 8004648:	7a5b      	ldrb	r3, [r3, #9]
 800464a:	b2db      	uxtb	r3, r3
 800464c:	2b00      	cmp	r3, #0
 800464e:	d131      	bne.n	80046b4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8004650:	4b1c      	ldr	r3, [pc, #112]	; (80046c4 <FATFS_LinkDriverEx+0x94>)
 8004652:	7a5b      	ldrb	r3, [r3, #9]
 8004654:	b2db      	uxtb	r3, r3
 8004656:	461a      	mov	r2, r3
 8004658:	4b1a      	ldr	r3, [pc, #104]	; (80046c4 <FATFS_LinkDriverEx+0x94>)
 800465a:	2100      	movs	r1, #0
 800465c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800465e:	4b19      	ldr	r3, [pc, #100]	; (80046c4 <FATFS_LinkDriverEx+0x94>)
 8004660:	7a5b      	ldrb	r3, [r3, #9]
 8004662:	b2db      	uxtb	r3, r3
 8004664:	4a17      	ldr	r2, [pc, #92]	; (80046c4 <FATFS_LinkDriverEx+0x94>)
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4413      	add	r3, r2
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800466e:	4b15      	ldr	r3, [pc, #84]	; (80046c4 <FATFS_LinkDriverEx+0x94>)
 8004670:	7a5b      	ldrb	r3, [r3, #9]
 8004672:	b2db      	uxtb	r3, r3
 8004674:	461a      	mov	r2, r3
 8004676:	4b13      	ldr	r3, [pc, #76]	; (80046c4 <FATFS_LinkDriverEx+0x94>)
 8004678:	4413      	add	r3, r2
 800467a:	79fa      	ldrb	r2, [r7, #7]
 800467c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800467e:	4b11      	ldr	r3, [pc, #68]	; (80046c4 <FATFS_LinkDriverEx+0x94>)
 8004680:	7a5b      	ldrb	r3, [r3, #9]
 8004682:	b2db      	uxtb	r3, r3
 8004684:	1c5a      	adds	r2, r3, #1
 8004686:	b2d1      	uxtb	r1, r2
 8004688:	4a0e      	ldr	r2, [pc, #56]	; (80046c4 <FATFS_LinkDriverEx+0x94>)
 800468a:	7251      	strb	r1, [r2, #9]
 800468c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800468e:	7dbb      	ldrb	r3, [r7, #22]
 8004690:	3330      	adds	r3, #48	; 0x30
 8004692:	b2da      	uxtb	r2, r3
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	3301      	adds	r3, #1
 800469c:	223a      	movs	r2, #58	; 0x3a
 800469e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	3302      	adds	r3, #2
 80046a4:	222f      	movs	r2, #47	; 0x2f
 80046a6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	3303      	adds	r3, #3
 80046ac:	2200      	movs	r2, #0
 80046ae:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80046b0:	2300      	movs	r3, #0
 80046b2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80046b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	371c      	adds	r7, #28
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	200000c8 	.word	0x200000c8

080046c8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80046d2:	2200      	movs	r2, #0
 80046d4:	6839      	ldr	r1, [r7, #0]
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f7ff ffaa 	bl	8004630 <FATFS_LinkDriverEx>
 80046dc:	4603      	mov	r3, r0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3708      	adds	r7, #8
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
	...

080046e8 <__libc_init_array>:
 80046e8:	b570      	push	{r4, r5, r6, lr}
 80046ea:	4e0d      	ldr	r6, [pc, #52]	; (8004720 <__libc_init_array+0x38>)
 80046ec:	4c0d      	ldr	r4, [pc, #52]	; (8004724 <__libc_init_array+0x3c>)
 80046ee:	1ba4      	subs	r4, r4, r6
 80046f0:	10a4      	asrs	r4, r4, #2
 80046f2:	2500      	movs	r5, #0
 80046f4:	42a5      	cmp	r5, r4
 80046f6:	d109      	bne.n	800470c <__libc_init_array+0x24>
 80046f8:	4e0b      	ldr	r6, [pc, #44]	; (8004728 <__libc_init_array+0x40>)
 80046fa:	4c0c      	ldr	r4, [pc, #48]	; (800472c <__libc_init_array+0x44>)
 80046fc:	f000 f820 	bl	8004740 <_init>
 8004700:	1ba4      	subs	r4, r4, r6
 8004702:	10a4      	asrs	r4, r4, #2
 8004704:	2500      	movs	r5, #0
 8004706:	42a5      	cmp	r5, r4
 8004708:	d105      	bne.n	8004716 <__libc_init_array+0x2e>
 800470a:	bd70      	pop	{r4, r5, r6, pc}
 800470c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004710:	4798      	blx	r3
 8004712:	3501      	adds	r5, #1
 8004714:	e7ee      	b.n	80046f4 <__libc_init_array+0xc>
 8004716:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800471a:	4798      	blx	r3
 800471c:	3501      	adds	r5, #1
 800471e:	e7f2      	b.n	8004706 <__libc_init_array+0x1e>
 8004720:	0800483c 	.word	0x0800483c
 8004724:	0800483c 	.word	0x0800483c
 8004728:	0800483c 	.word	0x0800483c
 800472c:	08004840 	.word	0x08004840

08004730 <memset>:
 8004730:	4402      	add	r2, r0
 8004732:	4603      	mov	r3, r0
 8004734:	4293      	cmp	r3, r2
 8004736:	d100      	bne.n	800473a <memset+0xa>
 8004738:	4770      	bx	lr
 800473a:	f803 1b01 	strb.w	r1, [r3], #1
 800473e:	e7f9      	b.n	8004734 <memset+0x4>

08004740 <_init>:
 8004740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004742:	bf00      	nop
 8004744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004746:	bc08      	pop	{r3}
 8004748:	469e      	mov	lr, r3
 800474a:	4770      	bx	lr

0800474c <_fini>:
 800474c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800474e:	bf00      	nop
 8004750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004752:	bc08      	pop	{r3}
 8004754:	469e      	mov	lr, r3
 8004756:	4770      	bx	lr
